Model GAP_4, Test surface-energy-100-unrelaxed
Test run at 2018-10-18 20:55

model file: ../../../models/Si/GAP_4/model.py
============================================================
import os

from quippy import Potential

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
os.chdir(model_dir)
try:
    calculator = Potential(init_args='Potential xml_label="GAP_2014_11_7_0_0_38_2_147"', param_filename='gp_soap_all_12_10_0.5_4_5.0_8500.xml')
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP_2014_11_7_0_0_38_2_147'
============================================================
test file: ../../../tests/Si/surface-energy-100-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import Diamond

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model 

a0 = 5.44 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = Diamond(symbol='Si', latticeconstant=a0)

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (10, 1, 1)

def surface_energy(bulk):
    Nat = bulk.get_number_of_atoms()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[0,:] += [10.0,0.0,0.0]
    eexp  = bulk.get_potential_energy()
    
    print 'expanded cell energy', eexp
    e_form = (eexp - ebulk) / (bulk.cell[1,1]*bulk.cell[2,2])
    print 'unrelaxed 100 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_100_unrelaxed':
                surface_energy(bulk) }
============================================================
relax_atoms_cell using method cg_n
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
bulk cell energy -13054.1899248
expanded cell energy -13046.2073278
unrelaxed 100 surface formation energy 0.26790009877418824
============================================================
Property calculation output:


Summary of computed properties:
{'surface_energy_100_unrelaxed': '0.26790009877418824'}
============================================================
