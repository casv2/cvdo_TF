Model GAP, Test fourfold-defect-small-GAP_traj_eval
Test run at 2018-08-31 15:57

model file: ../../../models/Si/GAP/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2017_6_17_60_4_3_56_165"',
                                               param_filename='gp_iter6_sparse9k.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2017_6_17_60_4_3_56_165"',
                                               param_filename='gp_iter6_sparse9k.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Si/fourfold-defect-small-GAP_traj_eval/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"model-GAP-6-test-fourfold-defect.opt.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -10440.093390484277), (0.0, -10440.107148992694), (0.0, -10440.134759122324), (0.0, -10440.137932056272), (0.0, -10440.143442829883), (0.0, -10440.152120171695), (0.0, -10440.153937759733), (0.0, -10440.157157508887), (0.0, -10440.16234007469), (0.0, -10440.167842843111), (0.0, -10440.17084917572), (0.0, -10440.179574921038), (0.0, -10440.191071345002), (0.0, -10440.202592510066), (0.0, -10440.212239485225), (0.0, -10440.22990094148), (0.0, -10440.260345371453), (0.0, -10440.294277858953), (0.0, -10440.325982249356), (0.0, -10440.359645776658), (0.0, -10440.401427527684), (0.0, -10440.475894212854), (0.0, -10440.560881919502), (0.0, -10440.638737375244), (0.0, -10440.716749696678), (0.0, -10440.79625701192), (0.0, -10440.876698795455), (0.0, -10440.95702385991), (0.0, -10441.035845745368), (0.0, -10441.111900088914), (0.0, -10441.184478639565), (0.0, -10441.25344362308), (0.0, -10441.319804097446), (0.0, -10441.386604719366), (0.0, -10441.459637567292), (0.0, -10441.547444943855), (0.0, -10441.66038489497), (0.0, -10441.809857851014), (0.0, -10442.00642617944), (0.0, -10442.253477098895), (0.0, -10442.529984560135), (0.0, -10442.77156416283), (0.0, -10443.016371840007), (0.0, -10443.066495159872), (0.0, -10443.145437518677), (0.0, -10443.202959944316), (0.0, -10443.224271622128), (0.0, -10443.254558989927), (0.0, -10443.274571080376), (0.0, -10443.28653939527), (0.0, -10443.294632599884), (0.0, -10443.303523936756), (0.0, -10443.307326152906), (0.0, -10443.311931915237), (0.0, -10443.31326881382), (0.0, -10443.315725159822), (0.0, -10443.316547822402), (0.0, -10443.317371569237), (0.0, -10443.317817448646), (0.0, -10443.31851293253), (0.0, -10443.318925393558), (0.0, -10443.319144147881), (0.0, -10443.31942084943), (0.0, -10443.319639135983), (0.0, -10443.319931493255), (0.0, -10443.320051711811), (0.0, -10443.320216711796), (0.0, -10443.320278504007), (0.0, -10443.320297856248), (0.0, -10443.320305262772), (0.0, -10443.320315234681), (0.0, -10443.320325877108), (0.0, -10443.320337059693), (0.0, -10443.320341013003), (0.0, -10443.320344909245), (0.0, -10443.320345688504), (0.0, -10443.320346865456), (0.0, -10443.320347610346), (0.0, -10443.320348506888), (0.0, -10443.320347610346), (0.0, -10443.320348506888)]}
============================================================
