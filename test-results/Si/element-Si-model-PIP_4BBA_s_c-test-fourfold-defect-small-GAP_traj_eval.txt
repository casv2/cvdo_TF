Model PIP_4BBA_s_c, Test fourfold-defect-small-GAP_traj_eval
Test run at 2018-10-03 16:05

model file: ../../../models/Si/PIP_4BBA_s_c/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/SiPIP_4BBA_short_cas.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Si/fourfold-defect-small-GAP_traj_eval/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"model-GAP-6-test-fourfold-defect.opt.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -10440.59936052965), (0.0, -10440.612628079783), (0.0, -10440.639878619531), (0.0, -10440.643236776456), (0.0, -10440.649047836043), (0.0, -10440.658271614588), (0.0, -10440.65977704678), (0.0, -10440.662028696051), (0.0, -10440.664507403964), (0.0, -10440.663358326514), (0.0, -10440.661741441836), (0.0, -10440.653468849745), (0.0, -10440.634590702502), (0.0, -10440.61314241213), (0.0, -10440.62067379291), (0.0, -10440.632441505173), (0.0, -10440.645876180612), (0.0, -10440.648752679508), (0.0, -10440.644005613009), (0.0, -10440.636162233146), (0.0, -10440.666279221366), (0.0, -10440.71166436701), (0.0, -10440.755180525797), (0.0, -10440.792893729888), (0.0, -10440.832301724793), (0.0, -10440.874636397048), (0.0, -10440.91850627638), (0.0, -10440.961489504793), (0.0, -10441.00048375877), (0.0, -10441.036035483123), (0.0, -10441.073167269957), (0.0, -10441.11197975968), (0.0, -10441.153287160321), (0.0, -10441.199336275222), (0.0, -10441.25486768709), (0.0, -10441.32712077234), (0.0, -10441.425686322009), (0.0, -10441.561372299851), (0.0, -10441.743563535418), (0.0, -10441.9754504502), (0.0, -10442.238694747135), (0.0, -10442.470982958508), (0.0, -10442.713942030527), (0.0, -10442.76191474107), (0.0, -10442.837684495065), (0.0, -10442.898994928599), (0.0, -10442.919202853242), (0.0, -10442.950761464108), (0.0, -10442.973249071674), (0.0, -10442.987221653872), (0.0, -10442.996595911922), (0.0, -10443.007127409099), (0.0, -10443.010968187073), (0.0, -10443.015921830282), (0.0, -10443.017582988938), (0.0, -10443.020841097004), (0.0, -10443.021939390852), (0.0, -10443.023107828732), (0.0, -10443.023578778193), (0.0, -10443.024406398737), (0.0, -10443.025214522151), (0.0, -10443.025371574735), (0.0, -10443.025694024363), (0.0, -10443.0260217783), (0.0, -10443.026487474446), (0.0, -10443.02664954414), (0.0, -10443.026838823862), (0.0, -10443.026899430075), (0.0, -10443.026915734254), (0.0, -10443.026921324203), (0.0, -10443.026929914697), (0.0, -10443.026940692342), (0.0, -10443.026952699973), (0.0, -10443.0269565313), (0.0, -10443.026960033178), (0.0, -10443.026960698338), (0.0, -10443.02696177199), (0.0, -10443.026962410568), (0.0, -10443.026963238883), (0.0, -10443.026962410568), (0.0, -10443.026963238883)]}
============================================================
