Model PIP_4BBA_s_c, Test 111_layer_test
Test run at 2018-10-03 16:05

model file: ../../../models/Si/PIP_4BBA_s_c/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/SiPIP_4BBA_short_cas.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Si/111_layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"111_layers.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -979.0337778895833), (0.0, -979.0301761371961), (0.0, -979.017536312259), (0.0, -978.9964915264769), (0.0, -978.9677655084644), (0.0, -978.9318328465881), (0.0, -978.8890658689478), (0.0, -978.8397831976089), (0.0, -978.7842892067769), (0.0, -978.7228601361157), (0.0, -978.6557517428774), (0.0, -978.5832244263195), (0.0, -978.5055670269878), (0.0, -978.4231184502761), (0.0, -978.3361918731993), (0.0, -978.2451531300261), (0.0, -978.1504466056775), (0.0, -978.0524436975325), (0.0, -977.9504343139064), (0.0, -977.8412712297682), (0.0, -977.7253883464479), (0.0, -977.6035221808921), (0.0, -977.4763921377299), (0.0, -977.3447268844598), (0.0, -977.2094583484337), (0.0, -977.071248671587), (0.0, -976.9306574735664), (0.0, -976.7882033768806), (0.0, -976.6443633155066), (0.0, -976.4995728008598), (0.0, -976.3542270134238), (0.0, -976.2086825830974), (0.0, -976.0632599216352), (0.0, -975.9182459746639), (0.0, -975.7738972681873), (0.0, -975.630443134779), (0.0, -975.4880890163125), (0.0, -975.3470197535379), (0.0, -975.2074043219685), (0.0, -975.0694052141209), (0.0, -974.9331933016927), (0.0, -974.7989072949576), (0.0, -974.666679915302), (0.0, -974.5366999521791), (0.0, -974.409210695691), (0.0, -974.2843289146643), (0.0, -974.1621665822545), (0.0, -974.0428629510284), (0.0, -973.926575850238), (0.0, -973.8134183704408), (0.0, -973.7035011229111), (0.0, -973.5969321444111), (0.0, -973.4938160119751), (0.0, -973.3942528276497), (0.0, -973.2983371068626), (0.0, -973.2061571281499), (0.0, -973.117929904514), (0.0, -973.0338282824931), (0.0, -972.9539242055992), (0.0, -972.8783622149277), (0.0, -972.8076473996415), (0.0, -972.7418318907044), (0.0, -972.6808906307658), (0.0, -972.6247944022409), (0.0, -972.5735089555344), (0.0, -972.5262555723641), (0.0, -972.480473942997), (0.0, -972.4358913227591), (0.0, -972.3924439730342), (0.0, -972.3500720524337), (0.0, -972.308720088312), (0.0, -972.2683375992813), (0.0, -972.2288798689483), (0.0, -972.190308869184), (0.0, -972.1525943298366), (0.0, -972.1157149501288), (0.0, -972.0796597448137), (0.0, -972.0444444666026), (0.0, -972.0101234838), (0.0, -971.976724030852), (0.0, -971.9442226665765), (0.0, -971.9125829420575), (0.0, -971.8817704980671), (0.0, -971.8517530289931), (0.0, -971.8225100785122), (0.0, -971.7940668785881), (0.0, -971.7664074493213), (0.0, -971.7395095047714), (0.0, -971.71335198403), (0.0, -971.6879150182705), (0.0, -971.6631798925287), (0.0, -971.6391290036496), (0.0, -971.6157458132634), (0.0, -971.5930147973771), (0.0, -971.5709213916421), (0.0, -971.5494519340043), (0.0, -971.5285936038958), (0.0, -971.5083343598092), (0.0, -971.4886628741777), (0.0, -971.4695684680553)]}
============================================================
