Model PIP_Si_4BBAenv, Test bulk_hex_diamond
Test run at 2018-10-09 22:23

model file: ../../../models/Si/PIP_Si_4BBAenv/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/SiPIP_4BBAenv.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Si/bulk_hex_diamond/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
import ase.io, os
from math import sqrt

import lattice_tetragonal

# the current model
import model 

v0 = 20.0

# set up the a
bulk = ase.io.read(os.path.join(os.path.dirname(__file__),"hex_diamond.extxyz"))

cell_factor = (len(bulk)*v0/bulk.get_volume())**(1.0/3.0)
bulk.set_cell(bulk.get_cell()*cell_factor, scale_atoms=True)

(E_vs_V) = lattice_tetragonal.do_lattice(bulk, elastic=False)

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'hex_diamond_E_vs_V': E_vs_V }
============================================================
