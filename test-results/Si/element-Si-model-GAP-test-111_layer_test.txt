Model GAP, Test 111_layer_test
Test run at 2018-10-03 10:14

model file: ../../../models/Si/GAP/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2017_6_17_60_4_3_56_165"',
                                               param_filename='gp_iter6_sparse9k.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2017_6_17_60_4_3_56_165"',
                                               param_filename='gp_iter6_sparse9k.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Si/111_layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"111_layers.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -979.0612827480593), (0.0, -979.0614147773572), (0.0, -979.0523549477502), (0.0, -979.0348794831654), (0.0, -979.0097146318365), (0.0, -978.9775412663814), (0.0, -978.9390013000647), (0.0, -978.8947039389302), (0.0, -978.8452264808226), (0.0, -978.7911148716043), (0.0, -978.7329479323956), (0.0, -978.6713750962132), (0.0, -978.6068798670574), (0.0, -978.5398683106774), (0.0, -978.4706795501303), (0.0, -978.3995879538548), (0.0, -978.3268051672603), (0.0, -978.252480925011), (0.0, -978.1767031090715), (0.0, -978.0994978874302), (0.0, -978.0208307691418), (0.0, -977.940609909264), (0.0, -977.8586936745331), (0.0, -977.77490457809), (0.0, -977.6890503009467), (0.0, -977.6009544276621), (0.0, -977.5104957151428), (0.0, -977.4176565973256), (0.0, -977.3225597589011), (0.0, -977.2251555570059), (0.0, -977.1254376821045), (0.0, -977.023575360757), (0.0, -976.9198920051672), (0.0, -976.8148928384661), (0.0, -976.7092824150761), (0.0, -976.6039691576644), (0.0, -976.5000531197426), (0.0, -976.3987965597235), (0.0, -976.301577611385), (0.0, -976.2098301092789), (0.0, -976.1249738587513), (0.0, -976.0483418530023), (0.0, -975.9811065200328), (0.0, -975.9230961150527), (0.0, -975.8737651326777), (0.0, -975.8329834169225), (0.0, -975.8002994985065), (0.0, -975.7749513251356), (0.0, -975.7558961711992), (0.0, -975.7418573256928), (0.0, -975.7313849952578), (0.0, -975.722926987601), (0.0, -975.7149056406339), (0.0, -975.7057951913816), (0.0, -975.6941962804303), (0.0, -975.6789029838119), (0.0, -975.6589591094163), (0.0, -975.6337015606999), (0.0, -975.6027889913091), (0.0, -975.5662153004076), (0.0, -975.5243081956688), (0.0, -975.4777138699623), (0.0, -975.4273694477381), (0.0, -975.3744654368618), (0.0, -975.3204003188504), (0.0, -975.2667296755264), (0.0, -975.2151122362569), (0.0, -975.1672485131207), (0.0, -975.1221651309442), (0.0, -975.0783135685047), (0.0, -975.0358506325382), (0.0, -974.9949175210508), (0.0, -974.9556380798965), (0.0, -974.9181175826403), (0.0, -974.8824419170409), (0.0, -974.8486769128922), (0.0, -974.8168685790572), (0.0, -974.7870432508427), (0.0, -974.7592083122971), (0.0, -974.7333531601709), (0.0, -974.7094504379422), (0.0, -974.6874574710276), (0.0, -974.6673178999135), (0.0, -974.6492622975074), (0.0, -974.6338575324143), (0.0, -974.6209977514674), (0.0, -974.6105296710331), (0.0, -974.6022837224253), (0.0, -974.5960808997903), (0.0, -974.5917389475004), (0.0, -974.5890781176321), (0.0, -974.5879262782607), (0.0, -974.5881232155051), (0.0, -974.5895240085058), (0.0, -974.5920015026301), (0.0, -974.5954476668201), (0.0, -974.5997739706935), (0.0, -974.6049106172238), (0.0, -974.610804623953), (0.0, -974.6174168666581)]}
============================================================
