Model GAP_5k, Test dimer
Test run at 2018-10-02 13:48

model file: ../../../models/Si/GAP_5k/model.py
============================================================
from quippy import Potential
import __builtin__
import os

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

#if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
#    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2017_5_19_60_8_49_14_561"', param_filename='./gp_iter5_with111adatom_with3x3das_noconfigtypes_sparse9k.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2017_5_19_60_8_49_14_561"', param_filename='./gp_iter5_with111adatom_with3x3das_noconfigtypes_sparse9k.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'

#calculator = Potential(init_args='Potential xml_label="GAP_2017_5_19_60_8_49_14_561"', param_filename='./gp_iter5_with111adatom_with3x3das_noconfigtypes_sparse9k.xml')

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Si/dimer/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

from ase import Atoms
import model
import numpy as np

dimer = Atoms('Si2',
               positions=[[0, 0, 0],
                          [0, 0, 1.5]], cell=[[20,0,0],[0,20,0],[0,0,20]])


dimer.set_calculator(model.calculator)
    
p = dimer.get_positions()
e = []
rr = []

for r in np.arange(1.2,6.0,0.1):
    p[1,2] = r
    dimer.set_positions(p)
    e.append(dimer.get_potential_energy())
    rr.append(r)

properties = {'dimer distance':rr, 'dimer energy': e}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'dimer energy': [-292.41994171941445, -299.9952160152278, -306.1639877825218, -310.7916149256415, -314.56512909087513, -317.3154027071463, -319.2093076504769, -320.4826392214112, -321.29606105455383, -321.7992111827362, -322.05091905981055, -322.0757316925739, -321.89800552170425, -321.5461892074524, -321.04278626211806, -320.3997521254423, -319.6305186094065, -318.76730616685353, -317.8673461962208, -317.00015986857204, -316.22435546394286, -315.57087198468844, -315.0423194497821, -314.62432637626347, -314.29865765338656, -314.05122512969206, -313.87346286858997, -313.7588093897096, -313.69829948060703, -313.7426318039658, -313.95806143361483, -314.3538519515579, -314.9013499667579, -315.5163804617332, -316.0940256447567, -316.5563381736923, -316.8706871477395, -317.0405684079653, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895, -317.08994200056895], 'dimer distance': ['1.2', '1.3', '1.4000000000000001', '1.5000000000000002', '1.6000000000000003', '1.7000000000000004', '1.8000000000000005', '1.9000000000000006', '2.000000000000001', '2.1000000000000005', '2.200000000000001', '2.3000000000000007', '2.4000000000000012', '2.500000000000001', '2.6000000000000014', '2.700000000000001', '2.8000000000000016', '2.9000000000000012', '3.0000000000000018', '3.1000000000000014', '3.200000000000002', '3.3000000000000016', '3.400000000000002', '3.5000000000000018', '3.6000000000000023', '3.700000000000002', '3.8000000000000025', '3.900000000000002', '4.000000000000003', '4.100000000000002', '4.200000000000003', '4.3000000000000025', '4.400000000000003', '4.500000000000003', '4.600000000000003', '4.700000000000003', '4.800000000000003', '4.900000000000003', '5.0000000000000036', '5.100000000000003', '5.200000000000004', '5.300000000000003', '5.400000000000004', '5.500000000000004', '5.600000000000004', '5.700000000000004', '5.800000000000004', '5.900000000000005']}
============================================================
