Model PIP_IP4+Env+Reg, Test bulk_diamond
Test run at 2018-08-31 16:11

model file: ../../../models/Si/PIP_IP4+Env+Reg/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Si_IP4+Env+Reg.jld2")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Si/bulk_diamond/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import Diamond

import lattice_cubic

# the current model
import model

a0 = (20.0*8)**(1.0/3.0) # initial guess at lattice constant, cell will be relaxed below

# set up the a
bulk = Diamond(symbol='Si', latticeconstant=a0)

(c11, c12, c44, E_vs_V) = lattice_cubic.do_lattice(bulk, elastic=True)

a0 = bulk.cell[0,0] # save lattice constant after relaxation

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'diamond_a0': a0, 'diamond_c11': c11, 'diamond_c12': c12, 'diamond_c44': c44, 'diamond_bulk_modulus': (c11+2.0*c12)/3.0, 'diamond_E_vs_V': E_vs_V }
============================================================
relax_atoms_cell using method lbfgs_precon
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:ase.optimize.precon:use_pyamg=True but PyAMG cannot be imported! falling back on direct inversion of preconditioner, may be slow for large systems
PreconLBFGS:   0  16:16:14    -1305.399646       0.0000       0.0109
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.00 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=2.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): got r_NN=2.351 in 0.0310621261597 s
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=True, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.000218868255615 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000172138214111 s ---
INFO:ase.optimize.precon:--- remove zeros in 9.79900360107e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.00124788284302 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00139689445496 s ---
INFO:ase.optimize.precon:mu (-0.000) < 1.0, capping at mu=1.0
INFO:ase.optimize.precon:estimate_mu(): mu=1.0, mu_c=4.5763372385597885
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=False, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.000221967697144 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000187873840332 s ---
INFO:ase.optimize.precon:--- applied fixed_atoms in 6.19888305664e-05 s ---
INFO:ase.optimize.precon:--- remove zeros in 6.31809234619e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.000629901885986 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00100302696228 s ---
INFO:ase.optimize.precon:--- Precon created in 0.00301694869995 seconds ---
INFO:ase.optimize.precon:--- Precon applied in 0.000391006469727 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  16:16:21    -1305.415188       0.0000       0.0001
relaxed bulk
8
Lattice="5.461162139139284 0.0 0.0 0.0 5.461162139139284 -4.335252976192888e-28 0.0 -4.335252976192888e-28 5.461162139139284" Properties=species:S:1:pos:R:3:Z:I:1:forces:R:3 energy=-1305.41518796 stress="-9.905063638536333e-05 1.444538019562185e-28 1.1467225453074987e-56 1.444538019562185e-28 -9.905063638536337e-05 1.444538019562185e-28 1.1467225453074987e-56 1.444538019562185e-28 -9.905063638536333e-05" pbc="T T T"
Si       0.00000000      -0.00000000       0.00000000       14      -0.00000000       0.00000000      -0.00000000 
Si       1.36529053       1.36529053       1.36529053       14       0.00000000       0.00000000       0.00000000 
Si       2.73058107       2.73058107       0.00000000       14      -0.00000000       0.00000000      -0.00000000 
Si       4.09587160       4.09587160       1.36529053       14      -0.00000000       0.00000000      -0.00000000 
Si       2.73058107      -0.00000000       2.73058107       14      -0.00000000       0.00000000      -0.00000000 
Si       4.09587160       1.36529053       4.09587160       14       0.00000000       0.00000000       0.00000000 
Si       0.00000000       2.73058107       2.73058107       14       0.00000000       0.00000000      -0.00000000 
Si       1.36529053       4.09587160       4.09587160       14      -0.00000000       0.00000000      -0.00000000 
WARNING:ase.optimize.precon:use_pyamg=True but PyAMG cannot be imported! falling back on direct inversion of preconditioner, may be slow for large systems
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.00 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=2.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): got r_NN=2.333 in 0.0342659950256 s
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=True, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.000293970108032 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000254154205322 s ---
INFO:ase.optimize.precon:--- remove zeros in 7.41481781006e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.000750064849854 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00108814239502 s ---
INFO:ase.optimize.precon:estimate_mu(): mu=2.2524700491725844, mu_c=1.0
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=False, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.0103008747101 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000188112258911 s ---
INFO:ase.optimize.precon:--- applied fixed_atoms in 6.29425048828e-05 s ---
INFO:ase.optimize.precon:--- remove zeros in 7.20024108887e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.00068998336792 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00100302696228 s ---
INFO:ase.optimize.precon:--- Precon created in 0.0132229328156 seconds ---
INFO:ase.optimize.precon:--- Precon applied in 0.000225067138672 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py:763: UserWarning: Converting 3x3 stress tensor from JulipCalculator calculator to the required Voigt form.
  'calculator to the required Voigt form.')
INFO:ase.optimize.precon:max(abs(displacements)) = 0.00 A (0.00 r_NN)
INFO:ase.optimize.precon:--- Precon applied in 0.000399827957153 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
INFO:ase.optimize.precon:max(abs(displacements)) = 0.08 A (0.04 r_NN)
INFO:ase.optimize.precon:--- Precon applied in 0.000239133834839 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
INFO:ase.optimize.precon:max(abs(displacements)) = 0.04 A (0.02 r_NN)
INFO:ase.optimize.precon:--- Precon applied in 0.000236034393311 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
Fitting C_11
Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])
Stress array([-3.35204299, -1.65155048, -0.01586966,  1.56644872,  3.07437882]) GPa
Cij (gradient) / GPa    :     160.70842829497957
Error in Cij / GPa      :     2.141486001372015
Correlation coefficient :     0.9997337614341019
Setting C11 (1) to 1.003063 +/- 0.013366


Fitting C_21
Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])
Stress array([-1.31813201, -0.63717117, -0.01586966,  0.54281414,  1.04273781]) GPa
Cij (gradient) / GPa    :     59.01724943544176
Error in Cij / GPa      :     2.0723448429972247
Correlation coefficient :     0.9981556023223259
Setting C21 (7) to 0.368357 +/- 0.012935


Fitting C_31
Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])
Stress array([-1.31813201, -0.63717117, -0.01586967,  0.54281413,  1.04273782]) GPa
Cij (gradient) / GPa    :     59.01724948148492
Error in Cij / GPa      :     2.072344730435329
Correlation coefficient :     0.9981556025250032
Updating C31 (7) with value 0.368357 +/- 0.012935


Fitting C_44
Strain array([-0.02, -0.01,  0.  ,  0.01,  0.02])
Stress array([-1.38637810e+00, -7.00101872e-01,  2.05751599e-08,  6.93546488e-01,
        1.36549309e+00]) GPa
Cij (gradient) / GPa    :     68.97390726165311
Error in Cij / GPa      :     0.26738261175718736
Correlation coefficient :     0.999977458996867
Setting C44 (4) to 0.430501 +/- 0.001669


[[ C11  C12  C12               ]
 [ C12  C11  C12               ]
 [ C12  C12  C11               ]
 [                C44          ]
 [                     C44     ]
 [                          C44]]

 = 

[[160.71  59.02  59.02   0.     0.     0.  ]
 [ 59.02 160.71  59.02   0.     0.     0.  ]
 [ 59.02  59.02 160.71   0.     0.     0.  ]
 [  0.     0.     0.    68.97   0.     0.  ]
 [  0.     0.     0.     0.    68.97   0.  ]
 [  0.     0.     0.     0.     0.    68.97]]
C_11 = 160.71 +/- 2.14 GPa
C_12 = 59.02 +/- 2.07 GPa
C_44 = 68.97 +/- 0.27 GPa
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
relax_atoms_cell using method cg_n
symmetry.prep got symmetry group number 227 , international (Hermann-Mauguin) Fd-3m , Hall F 4d 2 3 -1d
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
EV_final  17.814485259960954 -163.064256316
EV_final  18.323470553102688 -163.107520067
EV_final  18.832455846244436 -163.138844961
EV_final  19.34144113938617 -163.160362623
EV_final  19.85042643252791 -163.172963793
EV_final  20.359411725669663 -163.176898495
EV_final  20.868397018811397 -163.173430734
EV_final  21.37738231195315 -163.16356653
EV_final  21.886367605094886 -163.148140816
EV_final  22.395352898236645 -163.127839558
EV_final  22.90433819137838 -163.103227324
EV_final  23.413323484520102 -163.074775647
============================================================
Property calculation output:


Summary of computed properties:
{'diamond_bulk_modulus': '92.91430907063541', 'diamond_c12': '59.01724945846333', 'diamond_c11': '160.70842829497957', 'diamond_E_vs_V': [('17.814485259960954', -163.0642563163015), ('18.323470553102688', -163.10752006703098), ('18.832455846244436', -163.13884496056738), ('19.34144113938617', -163.16036262327614), ('19.85042643252791', -163.17296379292392), ('20.359411725669663', -163.17689849492072), ('20.868397018811397', -163.17343073387642), ('21.37738231195315', -163.16356653049687), ('21.886367605094886', -163.1481408163046), ('22.395352898236645', -163.12783955763936), ('22.90433819137838', -163.10322732430723), ('23.413323484520102', -163.07477564735663)], 'diamond_c44': '68.97390726165311', 'diamond_a0': '5.461162139139284'}
============================================================
