Model PIP_4BBA_short_reg, Test dimer
Test run at 2018-10-02 14:07

model file: ../../../models/Si/PIP_4BBA_short_reg/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/SiPIP_4BBA_short_cas_reg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Si/dimer/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

from ase import Atoms
import model
import numpy as np

dimer = Atoms('Si2',
               positions=[[0, 0, 0],
                          [0, 0, 1.5]], cell=[[20,0,0],[0,20,0],[0,0,20]])


dimer.set_calculator(model.calculator)
    
p = dimer.get_positions()
e = []
rr = []

for r in np.arange(1.2,6.0,0.1):
    p[1,2] = r
    dimer.set_positions(p)
    e.append(dimer.get_potential_energy())
    rr.append(r)

properties = {'dimer distance':rr, 'dimer energy': e}
============================================================
Traceback (most recent call last):
  File "run-model-test-cas.py", line 91, in <module>
    import model # import and run the current model
  File "../../../models/Si/PIP_4BBA_short_reg/model.py", line 6, in <module>
    IP = juliaimport.import_IP(model_dir + "/SiPIP_4BBA_short_cas_reg.json")
  File "../../../models/Si/PIP_4BBA_short_reg/juliaimport.py", line 24, in import_IP
    julia.eval("IP = load_ip(\""+ potname + "\")")
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 458, in eval
    ans = self._call(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 412, in _call
    self.check_exception(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 441, in check_exception
    .format(exception, src))
julia.core.JuliaError: Exception 'MethodError: no method matching loadas_json(::Type{NBodyIPs.NBodyIP}, ::Dict{String,Any})
Closest candidates are:
  loadas_json(::Type{NBodyIPs.NBodyIP}, !Matched::AbstractArray{T,1} where T) at /Users/Cas/.julia/v0.6/NBodyIPs/src/common.jl:169
  loadas_json(!Matched::Val{:NBody}, ::Any) at /Users/Cas/.julia/v0.6/NBodyIPs/src/polynomials.jl:394' occurred while calling julia code:
IP = load_ip("/Users/Cas/gits/gap-testing-framework/models/Si/PIP_4BBA_short_reg/SiPIP_4BBA_short_cas_reg.json")
