Model PIP_bcc_varcell, Test burgers_path
Test run at 2018-10-24 12:06

model file: ../../../models/Ti/PIP_bcc_varcell/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Ti_bcc_varcell_k8.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.9900990426540375), (0.0, -748715.2444042712), (0.0, -3036181.450471312), (0.0, -6924713.997264713), (0.0, -12476958.998466581), (0.0, -19755805.951330394), (0.0, -28824947.783895195), (0.0, -39790929.623470664), (0.0, -52760772.47186041), (0.0, -67819330.26070273), (0.0, -85020275.35125369), (0.0, -104422198.80873507), (0.0, -126091953.80456114), (0.0, -150093872.2813939), (0.0, -176489597.93080926), (0.0, -205349492.3116939), (0.0, -236809457.34801054), (0.0, -270956432.43723774), (0.0, -307861619.5047821), (0.0, -347596622.15058565), (0.0, -390223115.50397277), (0.0, -435798098.56815624), (0.0, -484374043.39472055), (0.0, -536000275.14045286), (0.0, -590720872.1594956), (0.0, -648573598.7895594), (0.0, -709595262.8389373), (0.0, -773814943.0473394), (0.0, -841254391.0745773), (0.0, -911910441.0464091), (0.0, -911910441.0464091), (0.0, -853967787.4404683), (0.0, -802106807.0075583), (0.0, -756325867.2593796), (0.0, -716403658.4342413), (0.0, -681902819.5043368), (0.0, -652178439.1736336), (0.0, -626409764.6168458), (0.0, -603617972.1827629), (0.0, -582722657.4441845), (0.0, -562647665.2669743), (0.0, -542756262.013989), (0.0, -522313855.85414016), (0.0, -501658491.74708116), (0.0, -480628287.07043374), (0.0, -458907914.5088597), (0.0, -436220129.74169075), (0.0, -412311986.5413248), (0.0, -387051111.3441583), (0.0, -360442967.116011), (0.0, -332644637.0938947), (0.0, -303974957.1359052), (0.0, -274920812.06229395), (0.0, -246139349.8802973), (0.0, -218456312.3515042), (0.0, -192856572.76557112), (0.0, -170448222.83257365), (0.0, -152534427.76520348), (0.0, -140605014.31975365), (0.0, -136258700.89347267)]}
============================================================
