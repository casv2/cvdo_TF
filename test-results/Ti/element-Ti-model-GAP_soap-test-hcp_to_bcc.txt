Model GAP_soap, Test hcp_to_bcc
Test run at 2018-10-02 21:57

model file: ../../../models/Ti/GAP_soap/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_25_60_16_10_2_989"',
                                               param_filename='gp_soap_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_25_60_16_10_2_989"',
                                               param_filename='gp_soap_no_wire_surface.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/hcp_to_bcc/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"hcp_to_bcc_traj.xyz"),":")
Es = []
for at in ats[0::2]:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -97.13285243842537), (0.0, -97.09992612279913), (0.0, -97.04935704210611), (0.0, -96.9823723519208), (0.0, -96.90248087953827), (0.0, -96.81263477416026), (0.0, -96.71017629747253), (0.0, -96.60078136283715), (0.0, -96.49085838259015), (0.0, -96.38583261393762), (0.0, -96.2884918388829), (0.0, -96.2005034897544), (0.0, -96.12249505748858), (0.0, -96.055082412311), (0.0, -95.9983130449428), (0.0, -95.94624353078262), (0.0, -95.89235323271352), (0.0, -95.83494943544612), (0.0, -95.7692099276012), (0.0, -95.69007970112091), (0.0, -95.6216058266275), (0.0, -95.57784513055314), (0.0, -95.55547267747127), (0.0, -95.52521452729552), (0.0, -95.46052617409991), (0.0, -95.3682448335517), (0.0, -95.26105045112837), (0.0, -95.15278699393345), (0.0, -95.05612789313052), (0.0, -94.97816027643115), (0.0, -94.92535593984061), (0.0, -94.89787664953708), (0.0, -94.8893505031634), (0.0, -94.88835208362833), (0.0, -94.88443700190348), (0.0, -94.8685531709603), (0.0, -94.85170090534393), (0.0, -94.85756304599634), (0.0, -94.89619191269142), (0.0, -94.9664553033704), (0.0, -95.02737917966591), (0.0, -95.07813861082745), (0.0, -95.12244690116091), (0.0, -95.15641399276446), (0.0, -95.17090378447075), (0.0, -95.1621092930076), (0.0, -95.13325701219576), (0.0, -95.08235978014861), (0.0, -95.00965681805168), (0.0, -94.9147769649555)]}
============================================================
