Model Ti_Env4B_reg_tmp, Test surface-energy-100-unrelaxed
Test run at 2018-09-10 15:04

model file: ../../../models/Ti/Ti_Env4B_reg_tmp/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Ti-Env4B-reg-tmp.jld2")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Ti/surface-energy-100-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model 

a0 = 3.32 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = BodyCenteredCubic(symbol='Ti', latticeconstant=a0)

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (10, 1, 1)

def surface_energy(bulk):
    Nat = bulk.get_number_of_atoms()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[0,:] += [10.0,0.0,0.0]
    eexp  = bulk.get_potential_energy()
    
    print 'expanded cell energy', eexp
    e_form = (eexp - ebulk) / (bulk.cell[1,1]*bulk.cell[2,2])
    print 'unrelaxed 100 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_100_unrelaxed':
                surface_energy(bulk) }
============================================================
Traceback (most recent call last):
  File "run-model-test-cas.py", line 88, in <module>
    import model # import and run the current model
  File "../../../models/Ti/Ti_Env4B_reg_tmp/model.py", line 6, in <module>
    IP = juliaimport.import_IP(model_dir + "/Ti-Env4B-reg-tmp.jld2")
  File "../../../models/Ti/Ti_Env4B_reg_tmp/juliaimport.py", line 25, in import_IP
    julia.eval("IPf = fast(IP)")
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 458, in eval
    ans = self._call(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 412, in _call
    self.check_exception(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 441, in check_exception
    .format(exception, src))
julia.core.JuliaError: Exception 'MethodError: no method matching fast(::Void)
Closest candidates are:
  fast(!Matched::NBodyIPs.NBodyIP) at /Users/Cas/.julia/v0.6/NBodyIPs/src/common.jl:113
  fast(!Matched::NBodyIPs.OneBody) at /Users/Cas/.julia/v0.6/NBodyIPs/src/onebody.jl:22
  fast(!Matched::NBodyIPs.Polys.StNBPoly) at /Users/Cas/.julia/v0.6/NBodyIPs/src/polys.jl:243
  ...' occurred while calling julia code:
IPf = fast(IP)
