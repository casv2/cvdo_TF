Model GAP_vc16_r2, Test dimer
Test run at 2018-11-08 22:50

model file: ../../../models/Ti/GAP_vc16_r2/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_30_0_14_34_21_58"', param_filename='gp_soap_hcp_bcc_varcell_k16_rt2.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/dimer/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

from ase import Atoms
import model
import numpy as np
from ase.lattice.cubic import BodyCenteredCubic

single_atom = Atoms('Ti', cell=[[20,0,0],[0,20,0],[0,0,20]])
single_atom.set_calculator(model.calculator)
e0 = single_atom.get_potential_energy()

a0 = 3.32

bulk = BodyCenteredCubic(symbol='Ti', latticeconstant=a0)
rnn = np.linalg.norm(bulk.positions[1])

dimer = Atoms('Ti2',
               positions=[[0, 0, 0],
                          [0, 0, 1.5]], cell=[[20,0,0],[0,20,0],[0,0,20]])


dimer.set_calculator(model.calculator)

    
p = dimer.get_positions()
e = []
rr = []

for r in np.arange(2,7.0,0.1):
    p[1,2] = r
    dimer.set_positions(p)
    e.append(dimer.get_potential_energy() - (2*e0))
    rr.append(r)

properties = {'dimer distance':rr, 'dimer energy': e, 'rnn' : rnn}============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'dimer energy': [-0.03922503028331725, -0.03540606770817867, -0.026532670462266594, -0.010055152077109497, 0.0159151797198831, 0.05126340217709213, 0.0929692693588482, 0.1355438159581297, 0.17280000738092305, 0.19986066818295, 0.21425290280791387, 0.2158722388064529, 0.20635155879774558, 0.18833400378760778, 0.16479850104905225, 0.13846588038051522, 0.10085779086761626, 0.056841221385282026, 0.021135532697332593, -0.003200756127776927, -0.018737587531427735, -0.03060321929275922, -0.04167025675882208, -0.05163193777259423, -0.06027840177645949, -0.06750036105879786, -0.07328237381878466, -0.07768714979234659, -0.08083340829553265, -0.08287054458837417, -0.08395363751874108, -0.08422211045688854, -0.0837846738495589, -0.08271213650716547, -0.08103843341414319, -0.07876896939679412, -0.07589430920712736, -0.07240651426809741, -0.06831513818192292, -0.06366007973066701, -0.0585191106694527, -0.05300883593135808, -0.04727894738201144, -0.04150071875311134, -0.035851586685369696, -0.030498234595501827, -0.025580763018513863, -0.0212002809719678, -0.017411644184869957, -0.01422221008554203], 'dimer distance': ['2.0', '2.1', '2.2', '2.3000000000000003', '2.4000000000000004', '2.5000000000000004', '2.6000000000000005', '2.7000000000000006', '2.8000000000000007', '2.900000000000001', '3.000000000000001', '3.100000000000001', '3.200000000000001', '3.300000000000001', '3.4000000000000012', '3.5000000000000013', '3.6000000000000014', '3.7000000000000015', '3.8000000000000016', '3.9000000000000017', '4.000000000000002', '4.100000000000001', '4.200000000000002', '4.3000000000000025', '4.400000000000002', '4.500000000000002', '4.600000000000002', '4.700000000000003', '4.8000000000000025', '4.900000000000002', '5.000000000000003', '5.100000000000003', '5.200000000000003', '5.3000000000000025', '5.400000000000003', '5.5000000000000036', '5.600000000000003', '5.700000000000003', '5.800000000000003', '5.900000000000004', '6.0000000000000036', '6.100000000000003', '6.200000000000004', '6.300000000000004', '6.400000000000004', '6.5000000000000036', '6.600000000000004', '6.700000000000005', '6.800000000000004', '6.900000000000004'], 'rnn': '2.8752043405643364'}
============================================================
