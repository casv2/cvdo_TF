Model GAP_vc16_r2_sss, Test dimer
Test run at 2018-11-05 17:21

model file: ../../../models/Ti/GAP_vc16_r2_sss/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_11_5_0_17_15_45_304"', param_filename='gp_soap_hcp_bcc_varcell_k16_rt2_sss.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/dimer/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

from ase import Atoms
import model
import numpy as np
from ase.lattice.cubic import BodyCenteredCubic

single_atom = Atoms('Ti', cell=[[20,0,0],[0,20,0],[0,0,20]])
single_atom.set_calculator(model.calculator)
e0 = single_atom.get_potential_energy()

a0 = 3.32

bulk = BodyCenteredCubic(symbol='Ti', latticeconstant=a0)
rnn = np.linalg.norm(bulk.positions[1])

dimer = Atoms('Ti2',
               positions=[[0, 0, 0],
                          [0, 0, 1.5]], cell=[[20,0,0],[0,20,0],[0,0,20]])


dimer.set_calculator(model.calculator)

    
p = dimer.get_positions()
e = []
rr = []

for r in np.arange(2,7.0,0.1):
    p[1,2] = r
    dimer.set_positions(p)
    e.append(dimer.get_potential_energy() - (2*e0))
    rr.append(r)

properties = {'dimer distance':rr, 'dimer energy': e, 'rnn' : rnn}============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'dimer energy': [0.22581279325927106, 0.26521974551149263, 0.311446766500012, 0.3623939536713152, 0.41766129652142325, 0.4787674238376898, 0.547552289775938, 0.6244515735619558, 0.7086011917843713, 0.7994980418840303, 0.8978088853875263, 1.0037376721523268, 1.1141828987942013, 1.2214167222438883, 1.3146517715117643, 1.3833737758792068, 1.4222390040086692, 1.4178387217033181, 1.3826080564484613, 1.325471979111006, 1.2470075155667182, 1.1527100108215143, 1.047129273483046, 0.9320848372083219, 0.8097198617286283, 0.6824679308216037, 0.5529917029494467, 0.42409310829516933, 0.29859923934550636, 0.1792323174874415, 0.06847536006305432, -0.03155320067432221, -0.11920302440473307, -0.19336284696275996, -0.25349214718391977, -0.29961148830184214, -0.3322544456839118, -0.3523882909732201, -0.3613135624128727, -0.360553947405144, -0.3517474962327931, -0.33654834231895947, -0.3165453178880391, -0.29320072288731325, -0.26780960080817096, -0.2414776293353995, -0.21511437011340462, -0.18943814227002775, -0.1649890079377485, -0.14214699747060422], 'dimer distance': ['2.0', '2.1', '2.2', '2.3000000000000003', '2.4000000000000004', '2.5000000000000004', '2.6000000000000005', '2.7000000000000006', '2.8000000000000007', '2.900000000000001', '3.000000000000001', '3.100000000000001', '3.200000000000001', '3.300000000000001', '3.4000000000000012', '3.5000000000000013', '3.6000000000000014', '3.7000000000000015', '3.8000000000000016', '3.9000000000000017', '4.000000000000002', '4.100000000000001', '4.200000000000002', '4.3000000000000025', '4.400000000000002', '4.500000000000002', '4.600000000000002', '4.700000000000003', '4.8000000000000025', '4.900000000000002', '5.000000000000003', '5.100000000000003', '5.200000000000003', '5.3000000000000025', '5.400000000000003', '5.5000000000000036', '5.600000000000003', '5.700000000000003', '5.800000000000003', '5.900000000000004', '6.0000000000000036', '6.100000000000003', '6.200000000000004', '6.300000000000004', '6.400000000000004', '6.5000000000000036', '6.600000000000004', '6.700000000000005', '6.800000000000004', '6.900000000000004'], 'rnn': '2.8752043405643364'}
============================================================
