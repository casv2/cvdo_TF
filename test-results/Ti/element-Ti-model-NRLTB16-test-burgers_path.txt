Model NRLTB16, Test burgers_path
Test run at 2018-10-26 11:18

model file: ../../../models/Ti/NRLTB16/model.py
============================================================
from quippy import Potential
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
filename = os.path.join(model_dir, '16x16x16k_mesh_param_file_tightbind.parms.NRL_TB.Ti_spline.xml')

calculator = Potential('TB NRL-TB', param_filename = filename)#, Fermi_T = 0.001)

no_checkpoint = True
name = 'DFTB'============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.994351957531966), (0.0, -5.994685192607864), (0.0, -5.994960152531376), (0.0, -5.995165536578475), (0.0, -5.9952612611586), (0.0, -5.9952541237283175), (0.0, -5.995125159306591), (0.0, -5.994981197268263), (0.0, -5.994722539344716), (0.0, -5.994429292103775), (0.0, -5.994065798461933), (0.0, -5.993755936077162), (0.0, -5.9935614040047245), (0.0, -5.993396119217232), (0.0, -5.993219194020526), (0.0, -5.993087793430329), (0.0, -5.992997227612037), (0.0, -5.9929144816986595), (0.0, -5.992750729467366), (0.0, -5.992559661369263), (0.0, -5.992428110527609), (0.0, -5.992244456842913), (0.0, -5.992008948889279), (0.0, -5.991552079693788), (0.0, -5.99088031054543), (0.0, -5.9900047940446965), (0.0, -5.988889671849179), (0.0, -5.98757635324985), (0.0, -5.985948827487828), (0.0, -5.9842358004095875), (0.0, -5.9842358004095875), (0.0, -5.985215979199029), (0.0, -5.986838765953384), (0.0, -5.989030614858567), (0.0, -5.991642545959189), (0.0, -5.994649899955101), (0.0, -5.997932213895098), (0.0, -6.0014540115265795), (0.0, -6.005183345732526), (0.0, -6.00895961543948), (0.0, -6.012836521046555), (0.0, -6.016788324208288), (0.0, -6.020812773167014), (0.0, -6.024844488906917), (0.0, -6.0287829448995875), (0.0, -6.03270147552933), (0.0, -6.036540184946674), (0.0, -6.04025493659506), (0.0, -6.043967708113032), (0.0, -6.047602539531783), (0.0, -6.051069315118321), (0.0, -6.0543272042500105), (0.0, -6.057294665702813), (0.0, -6.059891295657784), (0.0, -6.0621535823245), (0.0, -6.064050735367778), (0.0, -6.065508343555085), (0.0, -6.066611653760216), (0.0, -6.067323057398492), (0.0, -6.067553375607824)]}
============================================================
