Model GAP_bcc_varcell8, Test burgers_path
Test run at 2018-10-26 17:13

model file: ../../../models/Ti/GAP_bcc_varcell8/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_26_60_17_10_26_463"', param_filename='gp_soap_Ti_prim_bcc_varcell_k8_v7.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.993442343044798), (0.0, -5.993795329175924), (0.0, -5.994149717898134), (0.0, -5.994489650238117), (0.0, -5.994791385425333), (0.0, -5.995048992644671), (0.0, -5.995271277665889), (0.0, -5.995456163159212), (0.0, -5.995593720705557), (0.0, -5.995673972493631), (0.0, -5.995688977397218), (0.0, -5.995628419295752), (0.0, -5.9954814886761865), (0.0, -5.99523729916152), (0.0, -5.994885007853263), (0.0, -5.994413923276413), (0.0, -5.993813598995217), (0.0, -5.99307424007478), (0.0, -5.992186794743451), (0.0, -5.991142179811675), (0.0, -5.989931673569464), (0.0, -5.988547004576521), (0.0, -5.986980336126932), (0.0, -5.985223432803027), (0.0, -5.98324883233148), (0.0, -5.981037702165256), (0.0, -5.9785905037261236), (0.0, -5.975902474058662), (0.0, -5.972952129416285), (0.0, -5.969722315594572), (0.0, -5.969722315594572), (0.0, -5.970274030974231), (0.0, -5.970798721539868), (0.0, -5.971099872602814), (0.0, -5.971132595062892), (0.0, -5.970861358527012), (0.0, -5.970229264331721), (0.0, -5.969162365549343), (0.0, -5.967580962580653), (0.0, -5.965410225812909), (0.0, -5.962591700150791), (0.0, -5.959092057888134), (0.0, -5.9549192065268), (0.0, -5.950124797041526), (0.0, -5.94480947402873), (0.0, -5.939122218694262), (0.0, -5.933251407820953), (0.0, -5.927410534507684), (0.0, -5.92181486750107), (0.0, -5.916677393620308), (0.0, -5.9121976995521015), (0.0, -5.908555150654295), (0.0, -5.9058908316128385), (0.0, -5.904291580838256), (0.0, -5.903622539456827), (0.0, -5.903154702790646), (0.0, -5.902803947555946), (0.0, -5.90256603204751), (0.0, -5.902432475143893), (0.0, -5.902391165751621)]}
============================================================
