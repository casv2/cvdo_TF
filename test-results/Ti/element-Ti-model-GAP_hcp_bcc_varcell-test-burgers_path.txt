Model GAP_hcp_bcc_varcell, Test burgers_path
Test run at 2018-10-22 12:29

model file: ../../../models/Ti/GAP_hcp_bcc_varcell/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_16_60_20_24_13_425"', param_filename='gp_soap_hcp_bcc_varcell_24.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.879475185082549), (0.0, -5.879512188354818), (0.0, -5.879441757154974), (0.0, -5.879200125379885), (0.0, -5.878729496131067), (0.0, -5.878164984959371), (0.0, -5.877726532941018), (0.0, -5.877476962885326), (0.0, -5.877399144429676), (0.0, -5.877481181273934), (0.0, -5.877732858975343), (0.0, -5.878140896684259), (0.0, -5.878689752090924), (0.0, -5.879365126018339), (0.0, -5.88015443958549), (0.0, -5.881047232383086), (0.0, -5.882035473550645), (0.0, -5.8831169894312145), (0.0, -5.884295454031617), (0.0, -5.88557235379067), (0.0, -5.886950913096118), (0.0, -5.888436757154086), (0.0, -5.890037583760049), (0.0, -5.891754244092977), (0.0, -5.893374135525173), (0.0, -5.89478494882101), (0.0, -5.896107457408677), (0.0, -5.89745834948277), (0.0, -5.898757227645145), (0.0, -5.899934353025333), (0.0, -5.899934353025333), (0.0, -5.899135646731344), (0.0, -5.899130412535477), (0.0, -5.900183751012593), (0.0, -5.902392066154729), (0.0, -5.9058823196490495), (0.0, -5.910684448661134), (0.0, -5.9167378649757545), (0.0, -5.923920249731053), (0.0, -5.932046241036265), (0.0, -5.940866126112274), (0.0, -5.95004393703632), (0.0, -5.959243566277255), (0.0, -5.968103487629343), (0.0, -5.976300635485224), (0.0, -5.983594878815839), (0.0, -5.989837237159257), (0.0, -5.994957607515707), (0.0, -5.998881928296507), (0.0, -6.001624921599874), (0.0, -6.003326650872598), (0.0, -6.004304934747189), (0.0, -6.004923369882624), (0.0, -6.005452885702291), (0.0, -6.006033680265601), (0.0, -6.006456840072039), (0.0, -6.0067192545028885), (0.0, -6.006855212610306), (0.0, -6.006903744317224), (0.0, -6.006909162213793)]}
============================================================
