Model EAM, Test bulk_hcp
Test run at 2018-10-11 20:23

model file: ../../../models/Ti/EAM/model.py
============================================================
from ase.calculators.eam import EAM
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
filename = os.path.join(model_dir, 'Zope-Ti-Al-2003.eam.alloy')

calculator = EAM(potential=filename)

no_checkpoint = True
name = 'EAM'============================================================
test file: ../../../tests/Ti/bulk_hcp/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.hexagonal import HexagonalClosedPacked
from math import sqrt

import lattice_tetragonal

# the current model
import model 

#c_over_a = 1.8
#a0 = (16.0*2*2/sqrt(3.0)/c_over_a)**(1.0/3.0)# initial guess at lattice constant, cell will be relaxed below

c_over_a = 1.588
a0 = 2.95
#a0 = 2.95

# set up the a
bulk = HexagonalClosedPacked(symbol='Ti', latticeconstant=(a0,a0*c_over_a)) 

(c11, c33, c12, c13, c44, c66, E_vs_V) = lattice_tetragonal.do_lattice(bulk, elastic=True)#, tol=1.0e-2)

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
#properties = {'hcp_E_vs_V': E_vs_V }

properties = {'hcp_c11': c11, 'hcp_c33': c33, 'hcp_c12': c12, 'hcp_c13': c13, 'hcp_c44': c44, 'hcp_c66': c66, 'hcp_E_vs_V': E_vs_V }
============================================================
unrelaxed bulk
2
Lattice="2.95 0.0 0.0 -1.4749999999999994 2.5547749411640948 0.0 0.0 0.0 4.6846000000000005" Properties=species:S:1:pos:R:3:Z:I:1 pbc="T T T"
Ti       0.00000000       0.00000000       0.00000000       22 
Ti       0.00000000       1.70318329       2.34230000       22 
relax_atoms_cell using method cg_n
symmetry.prep: symmetry group number 194 , international (Hermann-Mauguin) P6_3/mmc , Hall -P 6c 2c
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
[[-1.47451495e-16 -5.50774704e-17  0.00000000e+00]
 [-2.53161207e-16  7.16332375e-16 -2.63677968e-16]]
Traceback (most recent call last):
  File "run-model-test-cas.py", line 102, in <module>
    import test  # import and run the current test
  File "../../../tests/Ti/bulk_hcp/test.py", line 31, in <module>
    (c11, c33, c12, c13, c44, c66, E_vs_V) = lattice_tetragonal.do_lattice(bulk, elastic=True)#, tol=1.0e-2)
  File "../../../share/lattice_tetragonal.py", line 44, in do_lattice
    bulk = relax_atoms_cell(bulk, tol=tol, traj_file="bulk.relax.extxyz", symmetrize=True)
  File "../../../share/utilities.py", line 178, in relax_atoms_cell
    opt.run(tol, max_steps)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 680, in run
    use_precond=self.use_precond)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 856, in <lambda>
    wrapmethod = lambda name: lambda self, *args, **kwargs: self._runroutine(name, *args, **kwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 574, in _runroutine
    res = fobj(*newargs, **newkwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 285, in callback
    Potential.callback_map[at.params['label']](at)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 57, in callback
    stress = at.get_stress()
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py", line 757, in get_stress
    stress = self._calc.get_stress(self)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 456, in get_stress
    return self.get_property('stress', atoms)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 486, in get_property
    self.calculate(atoms, [name], system_changes)
  File "../../../share/utilities.py", line 361, in calculate
    raw_stress = self.calc.get_stress(atoms)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 456, in get_stress
    return self.get_property('stress', atoms)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 474, in get_property
    .format(name))
ase.calculators.calculator.PropertyNotImplementedError: stress property not implemented
