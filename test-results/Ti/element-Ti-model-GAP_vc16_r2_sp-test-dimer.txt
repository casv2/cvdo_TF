Model GAP_vc16_r2_sp, Test dimer
Test run at 2018-11-05 16:56

model file: ../../../models/Ti/GAP_vc16_r2_sp/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_11_1_0_12_5_55_770"', param_filename='gp_soap_hcp_bcc_varcell_k16_rt2_sp.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/dimer/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

from ase import Atoms
import model
import numpy as np
from ase.lattice.cubic import BodyCenteredCubic

single_atom = Atoms('Ti', cell=[[20,0,0],[0,20,0],[0,0,20]])
single_atom.set_calculator(model.calculator)
e0 = single_atom.get_potential_energy()

a0 = 3.32

bulk = BodyCenteredCubic(symbol='Ti', latticeconstant=a0)
rnn = np.linalg.norm(bulk.positions[1])

dimer = Atoms('Ti2',
               positions=[[0, 0, 0],
                          [0, 0, 1.5]], cell=[[20,0,0],[0,20,0],[0,0,20]])


dimer.set_calculator(model.calculator)

    
p = dimer.get_positions()
e = []
rr = []

for r in np.arange(2,7.0,0.1):
    p[1,2] = r
    dimer.set_positions(p)
    e.append(dimer.get_potential_energy() - (2*e0))
    rr.append(r)

properties = {'dimer distance':rr, 'dimer energy': e, 'rnn' : rnn}============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'dimer energy': [0.007525827457392609, 0.012038397588661098, 0.02085954823124503, 0.03649503344492899, 0.0607665246689546, 0.09351005954720648, 0.13175360348382803, 0.1701872092753387, 0.20285532258308514, 0.22501853678032724, 0.23416492872415162, 0.23005091975347725, 0.21427540531345635, 0.18973771252375293, 0.1599762893440726, 0.12839334481011022, 0.08546938255016556, 0.03772615848981076, 0.0012872041443667825, -0.021356943539803552, -0.03358071303489929, -0.04175573654008957, -0.04957048680493692, -0.056900937237957194, -0.06363877520979777, -0.06969278622667474, -0.07498899963049155, -0.07946973856917694, -0.08309186381871747, -0.08582462096406474, -0.0876475706495583, -0.08854908342363998, -0.0885258037135781, -0.08758333289239495, -0.08573816394182465, -0.08302064772895612, -0.07947852159256108, -0.07518032810359898, -0.07021793700326207, -0.06470738837484724, -0.058787415428863454, -0.05261527467717997, -0.046359880339201354, -0.040192658360311384, -0.03427693895681472, -0.028757026273940056, -0.023748258072100015, -0.019329354851864267, -0.015538142243091357, -0.012371331752069281], 'dimer distance': ['2.0', '2.1', '2.2', '2.3000000000000003', '2.4000000000000004', '2.5000000000000004', '2.6000000000000005', '2.7000000000000006', '2.8000000000000007', '2.900000000000001', '3.000000000000001', '3.100000000000001', '3.200000000000001', '3.300000000000001', '3.4000000000000012', '3.5000000000000013', '3.6000000000000014', '3.7000000000000015', '3.8000000000000016', '3.9000000000000017', '4.000000000000002', '4.100000000000001', '4.200000000000002', '4.3000000000000025', '4.400000000000002', '4.500000000000002', '4.600000000000002', '4.700000000000003', '4.8000000000000025', '4.900000000000002', '5.000000000000003', '5.100000000000003', '5.200000000000003', '5.3000000000000025', '5.400000000000003', '5.5000000000000036', '5.600000000000003', '5.700000000000003', '5.800000000000003', '5.900000000000004', '6.0000000000000036', '6.100000000000003', '6.200000000000004', '6.300000000000004', '6.400000000000004', '6.5000000000000036', '6.600000000000004', '6.700000000000005', '6.800000000000004', '6.900000000000004'], 'rnn': '2.8752043405643364'}
============================================================
