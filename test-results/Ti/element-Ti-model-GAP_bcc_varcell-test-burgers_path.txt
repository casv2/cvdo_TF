Model GAP_bcc_varcell, Test burgers_path
Test run at 2018-10-24 11:40

model file: ../../../models/Ti/GAP_bcc_varcell/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_24_60_11_31_2_568"', param_filename='gp_soap_Ti_prim_bcc_varcell_k8.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.989695699164841), (0.0, -5.990059030674685), (0.0, -5.990471247431448), (0.0, -5.990900829920091), (0.0, -5.9913074458954565), (0.0, -5.991678453076495), (0.0, -5.992025024835733), (0.0, -5.992345872640487), (0.0, -5.992629543844986), (0.0, -5.992864594015032), (0.0, -5.993042446404242), (0.0, -5.993151479308778), (0.0, -5.993179477119655), (0.0, -5.993114212077254), (0.0, -5.9929436403531735), (0.0, -5.99265608744003), (0.0, -5.992240419245919), (0.0, -5.991686635451265), (0.0, -5.990986052599148), (0.0, -5.99013031861536), (0.0, -5.989111979198947), (0.0, -5.987924644004775), (0.0, -5.986563009647118), (0.0, -5.985022026399157), (0.0, -5.983286176487184), (0.0, -5.981347798506759), (0.0, -5.97920555805683), (0.0, -5.9768522152728), (0.0, -5.974278443403325), (0.0, -5.971481425880496), (0.0, -5.971481425880496), (0.0, -5.97171624461564), (0.0, -5.971831314605414), (0.0, -5.971581565310439), (0.0, -5.970909476021378), (0.0, -5.9697803099950395), (0.0, -5.968143186808392), (0.0, -5.965934563869181), (0.0, -5.9630907955854235), (0.0, -5.959558960799089), (0.0, -5.955308620260708), (0.0, -5.950341923785706), (0.0, -5.944704048308275), (0.0, -5.938486791870707), (0.0, -5.931828734016722), (0.0, -5.9249108125323815), (0.0, -5.9179455599978406), (0.0, -5.91116222913876), (0.0, -5.904783530325226), (0.0, -5.899017105352955), (0.0, -5.894054376179162), (0.0, -5.8900494138102), (0.0, -5.8871066274493105), (0.0, -5.885274819011035), (0.0, -5.88438920990329), (0.0, -5.883737123632895), (0.0, -5.883238495458646), (0.0, -5.882890770594423), (0.0, -5.882688263464315), (0.0, -5.882622868185918)]}
============================================================
