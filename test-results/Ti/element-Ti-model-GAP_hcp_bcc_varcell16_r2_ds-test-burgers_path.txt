Model GAP_hcp_bcc_varcell16_r2_ds, Test burgers_path
Test run at 2018-11-01 16:06

model file: ../../../models/Ti/GAP_hcp_bcc_varcell16_r2_ds/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_11_1_0_12_7_30_824"', param_filename='gp_soap_hcp_bcc_varcell_k16_rt2_ds.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.9966266296951805), (0.0, -5.996942402111526), (0.0, -5.997160567246384), (0.0, -5.997299820519896), (0.0, -5.997378782325866), (0.0, -5.9973995976004195), (0.0, -5.997356376200307), (0.0, -5.997254727299076), (0.0, -5.997106122334767), (0.0, -5.996921246928943), (0.0, -5.996708626532754), (0.0, -5.99647798711927), (0.0, -5.9962385449200175), (0.0, -5.9959986197230055), (0.0, -5.99576548523612), (0.0, -5.9955452333944), (0.0, -5.99534265648102), (0.0, -5.995160905613715), (0.0, -5.995001434048417), (0.0, -5.994864583086944), (0.0, -5.994749271876144), (0.0, -5.994652967667226), (0.0, -5.9945717636861335), (0.0, -5.994501338499233), (0.0, -5.994465597526852), (0.0, -5.994481045001729), (0.0, -5.994533909516322), (0.0, -5.994619741190792), (0.0, -5.994760228191041), (0.0, -5.994969097814723), (0.0, -5.994969097814723), (0.0, -5.995227236313468), (0.0, -5.995587473313276), (0.0, -5.996239317308981), (0.0, -5.997278620321244), (0.0, -5.998766728070937), (0.0, -6.000751221442009), (0.0, -6.003262019918944), (0.0, -6.006305595120931), (0.0, -6.009861725167737), (0.0, -6.013881602449656), (0.0, -6.018292199368289), (0.0, -6.022988127598381), (0.0, -6.027844695114599), (0.0, -6.032722968671841), (0.0, -6.037478982423881), (0.0, -6.041979960625965), (0.0, -6.046121273473802), (0.0, -6.049847711510365), (0.0, -6.053141065493502), (0.0, -6.0560200093529915), (0.0, -6.05850718806174), (0.0, -6.060625094874772), (0.0, -6.06239550690543), (0.0, -6.063844651048769), (0.0, -6.065074507937245), (0.0, -6.066079174819671), (0.0, -6.06683462496351), (0.0, -6.067312355406466), (0.0, -6.067479563775388)]}
============================================================
