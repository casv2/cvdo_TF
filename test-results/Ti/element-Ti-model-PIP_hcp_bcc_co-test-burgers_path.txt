Model PIP_hcp_bcc_co, Test burgers_path
Test run at 2018-10-11 22:16

model file: ../../../models/Ti/PIP_hcp_bcc_co/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Ti_phonon.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, 1293.6758185427343), (0.0, 1290.455883497003), (0.0, 1274.4189966504473), (0.0, 1242.4679321563472), (0.0, 1190.5177091072728), (0.0, 1113.3234489467159), (0.0, 1004.2540823844101), (0.0, 854.8345759629137), (0.0, 654.2853186145112), (0.0, 388.97196836557123), (0.0, 41.753398559734705), (0.0, -408.7856270434495), (0.0, -989.2311174688184), (0.0, -1732.3809526404875), (0.0, -2678.446374857571), (0.0, -3876.4296610987376), (0.0, -5385.699976728194), (0.0, -7277.879688635481), (0.0, -9638.803486689987), (0.0, -12570.794747775555), (0.0, -16195.163925903991), (0.0, -20655.011620066274), (0.0, -26118.338420076547), (0.0, -32781.45510254648), (0.0, -40872.713905782024), (0.0, -50656.71632871372), (0.0, -62439.18967507467), (0.0, -76570.92783199593), (0.0, -93453.20514402645), (0.0, -113543.34677682522), (0.0, -113543.34677682522), (0.0, -102914.83624827786), (0.0, -92256.01290015168), (0.0, -81773.15607563041), (0.0, -71649.6693122638), (0.0, -62041.46612001807), (0.0, -53074.04548790963), (0.0, -44841.10304018536), (0.0, -37404.625460944444), (0.0, -30796.316549155723), (0.0, -25020.176125183876), (0.0, -20055.93407378553), (0.0, -15863.103125994969), (0.0, -12385.363623929927), (0.0, -9555.029311411552), (0.0, -7297.365515518557), (0.0, -5534.58459389646), (0.0, -4189.3455055696395), (0.0, -3187.7083626544136), (0.0, -2461.4518689668234), (0.0, -1949.7397537205452), (0.0, -1600.1595406394235), (0.0, -1369.1505102923775), (0.0, -1221.8785037922235), (0.0, -1131.619631250611), (0.0, -1078.7461970661643), (0.0, -1049.3794939520185), (0.0, -1033.9817280992297), (0.0, -1026.6127056376843), (0.0, -1024.2782051230806)]}
============================================================
