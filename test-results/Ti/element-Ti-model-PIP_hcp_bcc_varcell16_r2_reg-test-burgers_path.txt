Model PIP_hcp_bcc_varcell16_r2_reg, Test burgers_path
Test run at 2018-11-01 16:39

model file: ../../../models/Ti/PIP_hcp_bcc_varcell16_r2_reg/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Ti_hcp_bcc_varcell_k16_rt2_reg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.996623890905073), (0.0, -5.99696246613921), (0.0, -5.9972207919762335), (0.0, -5.997397125656379), (0.0, -5.997491347163281), (0.0, -5.997505138125678), (0.0, -5.997442277896263), (0.0, -5.997317332250607), (0.0, -5.997142105924959), (0.0, -5.996929878817825), (0.0, -5.996685438717034), (0.0, -5.9964113722508685), (0.0, -5.9961099545789995), (0.0, -5.995786489541799), (0.0, -5.995447640669063), (0.0, -5.995100839715075), (0.0, -5.994755298490444), (0.0, -5.994418175261564), (0.0, -5.9940957166169095), (0.0, -5.993790348478672), (0.0, -5.993504796517283), (0.0, -5.993241470035027), (0.0, -5.993011591799699), (0.0, -5.992882805141186), (0.0, -5.992841595378493), (0.0, -5.992860026178681), (0.0, -5.992913215065063), (0.0, -5.992982218645041), (0.0, -5.993048092837474), (0.0, -5.993091696450259), (0.0, -5.993091696450259), (0.0, -5.993609675240556), (0.0, -5.994436023449241), (0.0, -5.995584576080037), (0.0, -5.997092222913696), (0.0, -5.998980629893437), (0.0, -6.00126489443096), (0.0, -6.003947939609754), (0.0, -6.006999866782373), (0.0, -6.01037207526355), (0.0, -6.014007623007561), (0.0, -6.01788678989851), (0.0, -6.0219524356173215), (0.0, -6.0261039615610805), (0.0, -6.030291716871254), (0.0, -6.034372603388347), (0.0, -6.038301081431136), (0.0, -6.042068733346188), (0.0, -6.045663077165226), (0.0, -6.049068029502745), (0.0, -6.052264434919312), (0.0, -6.055230599563132), (0.0, -6.05794280994155), (0.0, -6.0603758522419025), (0.0, -6.062503492810896), (0.0, -6.064299003394483), (0.0, -6.065735923287193), (0.0, -6.066789149168044), (0.0, -6.067435464203564), (0.0, -6.067655144397827)]}
============================================================
