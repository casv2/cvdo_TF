Model GAP_fd16, Test burgers_path
Test run at 2018-11-09 17:44

model file: ../../../models/Ti/GAP_fd16/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_11_9_0_17_40_40_195"', param_filename='gp_soap_hcp_bcc_fdcell.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -5.983516315036244), (0.0, -5.983741621553536), (0.0, -5.983803964197742), (0.0, -5.983632543048692), (0.0, -5.983143169036363), (0.0, -5.982330700446758), (0.0, -5.9812419590839525), (0.0, -5.979874061452859), (0.0, -5.978193940444939), (0.0, -5.9761707569422855), (0.0, -5.973783597274675), (0.0, -5.971003942808832), (0.0, -5.967803686672785), (0.0, -5.964156885512956), (0.0, -5.960040321509634), (0.0, -5.955434020028908), (0.0, -5.950321710520405), (0.0, -5.944692514658627), (0.0, -5.938541309196189), (0.0, -5.931865723858911), (0.0, -5.924667805671708), (0.0, -5.916954396452962), (0.0, -5.908737063649681), (0.0, -5.900028669946032), (0.0, -5.890764858240207), (0.0, -5.880916997904311), (0.0, -5.870538547608126), (0.0, -5.859665938855398), (0.0, -5.848271428388076), (0.0, -5.83634716676573), (0.0, -5.83634716676573), (0.0, -5.837464189852891), (0.0, -5.839367052669614), (0.0, -5.842643045315903), (0.0, -5.847728269943216), (0.0, -5.8550420861092585), (0.0, -5.864921989320155), (0.0, -5.877570311155418), (0.0, -5.893016549337261), (0.0, -5.911077411381405), (0.0, -5.931333581708481), (0.0, -5.953121667636408), (0.0, -5.9755942911170035), (0.0, -5.997768107498388), (0.0, -6.018626311727521), (0.0, -6.037230955140318), (0.0, -6.052819774847408), (0.0, -6.0648805106346275), (0.0, -6.073168579119029), (0.0, -6.077767274895544), (0.0, -6.079084111787095), (0.0, -6.077826012769438), (0.0, -6.074890163739208), (0.0, -6.071239466305369), (0.0, -6.067761929582455), (0.0, -6.064716195256197), (0.0, -6.062212780281161), (0.0, -6.060352900622661), (0.0, -6.0592088202070675), (0.0, -6.058823002558171)]}
============================================================
