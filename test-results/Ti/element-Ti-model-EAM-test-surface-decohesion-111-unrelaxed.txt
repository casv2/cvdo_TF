Model EAM, Test surface-decohesion-111-unrelaxed
Test run at 2018-10-11 20:23

model file: ../../../models/Ti/EAM/model.py
============================================================
from ase.calculators.eam import EAM
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
filename = os.path.join(model_dir, 'Zope-Ti-Al-2003.eam.alloy')

calculator = EAM(potential=filename)

no_checkpoint = True
name = 'EAM'============================================================
test file: ../../../tests/Ti/surface-decohesion-111-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic
import numpy as np

import ase.io, sys

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model

a0 = 3.32 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = BodyCenteredCubic(symbol='Ti', latticeconstant=a0, directions=[[1,-1,0],[1,0,-1],[1,1,1]])

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (1, 1, 5)


def surface_energy(bulk, z_offset, opening):
    Nat = bulk.get_number_of_atoms()

    # shift so cut is through shuffle plane
    bulk.positions[:,2] += z_offset
    bulk.wrap()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[2,:] += [0.0,0.0,opening]
    eexp  = bulk.get_potential_energy()

    ase.io.write(sys.stdout, bulk, format='extxyz')

    print 'expanded cell energy', eexp
    e_form = 0.5*(eexp - ebulk) / np.linalg.norm(np.cross(bulk.cell[0,:],bulk.cell[1,:]))
    print 'unrelaxed 111 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models

n_steps = 30
max_opening = 3.0

openings = []
es = []
for i in range(n_steps + 1):
    opening = float(i)/float(n_steps)*max_opening
    openings.append(opening)
    bulk_copy = bulk.copy()
    bulk_copy.set_calculator(model.calculator)
    es.append(surface_energy(bulk_copy, 2.0, opening))

print "openings ", openings
print "es ", es
from scipy import interpolate
spline = interpolate.splrep(openings, es, s=0)
stresses = [x for x in interpolate.splev(openings, spline, der=1)]

print "stresses ", stresses
properties = {'surface_decohesion_unrelaxed_opening': openings, 'surface_decohesion_unrelaxed_energy' : es, 'surface_decohesion_unrelaxed_stress' : stresses}

============================================================
relax_atoms_cell using method cg_n
WARNING:quippy.potential:Minim atoms is not quippy.Atoms instance, copy forced!
Traceback (most recent call last):
  File "run-model-test-cas.py", line 102, in <module>
    import test  # import and run the current test
  File "../../../tests/Ti/surface-decohesion-111-unrelaxed/test.py", line 35, in <module>
    bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)
  File "../../../share/utilities.py", line 178, in relax_atoms_cell
    opt.run(tol, max_steps)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 680, in run
    use_precond=self.use_precond)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 856, in <lambda>
    wrapmethod = lambda name: lambda self, *args, **kwargs: self._runroutine(name, *args, **kwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 574, in _runroutine
    res = fobj(*newargs, **newkwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 285, in callback
    Potential.callback_map[at.params['label']](at)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 57, in callback
    stress = at.get_stress()
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py", line 757, in get_stress
    stress = self._calc.get_stress(self)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 456, in get_stress
    return self.get_property('stress', atoms)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 474, in get_property
    .format(name))
ase.calculators.calculator.PropertyNotImplementedError: stress property not implemented
