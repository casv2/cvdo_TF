Model GAP_2b_3b, Test hcp_to_bcc
Test run at 2018-10-02 15:38

model file: ../../../models/Ti/GAP_2b_3b/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_5_29_60_13_48_53_535"',
                                               param_filename='gp_2b_3b.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_5_29_60_13_48_53_535"',
                                               param_filename='gp_2b_3b.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/hcp_to_bcc/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"hcp_to_bcc_traj.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -96.93279644079287), (0.0, -96.87052275071146), (0.0, -96.8050551342679), (0.0, -96.7359461248301), (0.0, -96.66245559677306), (0.0, -96.58480889361306), (0.0, -96.5028906365568), (0.0, -96.4162470738598), (0.0, -96.32361203551793), (0.0, -96.22363091038135), (0.0, -96.11575818996418), (0.0, -96.00279856569658), (0.0, -95.89637369517942), (0.0, -95.80214595428238), (0.0, -95.7217717411843), (0.0, -95.65368489497615), (0.0, -95.59797290571062), (0.0, -95.55752821584584), (0.0, -95.53317534977364), (0.0, -95.51672244046662), (0.0, -95.50366762070588), (0.0, -95.49448497418568), (0.0, -95.48807469511247), (0.0, -95.48395116261985), (0.0, -95.48447112991808), (0.0, -95.49153716903382), (0.0, -95.50634818488376), (0.0, -95.52924837306296), (0.0, -95.56039590084686), (0.0, -95.59683526300513), (0.0, -95.63543410824589), (0.0, -95.67319035169592), (0.0, -95.7125270335273), (0.0, -95.75131078143787), (0.0, -95.78530503249618), (0.0, -95.81260481557686), (0.0, -95.83587192835044), (0.0, -95.85896374222624), (0.0, -95.8839155895079), (0.0, -95.90432101983815), (0.0, -95.91707600989533), (0.0, -95.92361888841805), (0.0, -95.92540084109042), (0.0, -95.92463862654273), (0.0, -95.9230154515964), (0.0, -95.92219683651855), (0.0, -95.9243596939961), (0.0, -95.92947039679242), (0.0, -95.93691285433296), (0.0, -95.94576448809858), (0.0, -95.95486486852285), (0.0, -95.96475110685947), (0.0, -95.97707138850419), (0.0, -95.99156323386555), (0.0, -96.00798844001243), (0.0, -96.02613747750239), (0.0, -96.0458261630214), (0.0, -96.06689236215925), (0.0, -96.08919339154372), (0.0, -96.11260303909376), (0.0, -96.13700968554953), (0.0, -96.16231419720464), (0.0, -96.18842869183257), (0.0, -96.2152756653897), (0.0, -96.2427875508907), (0.0, -96.27090705631953), (0.0, -96.29958759431672), (0.0, -96.32879475595963), (0.0, -96.35850772812316), (0.0, -96.38872131702014), (0.0, -96.41944300858508), (0.0, -96.44777239163892), (0.0, -96.46918873562106), (0.0, -96.48245708609524), (0.0, -96.48648362060219), (0.0, -96.48015080535451), (0.0, -96.46254827857618), (0.0, -96.43072430813318), (0.0, -96.3910979538997), (0.0, -96.34451322479393), (0.0, -96.28526712668925), (0.0, -96.20832779810002), (0.0, -96.11180636893407), (0.0, -95.99509604875385), (0.0, -95.85752762351247), (0.0, -95.70163104654425), (0.0, -95.53011302704127), (0.0, -95.3458308986469), (0.0, -95.1515191124507), (0.0, -94.95020785896206), (0.0, -94.74492100316154), (0.0, -94.53988315010686), (0.0, -94.33700077937117), (0.0, -94.13750678648), (0.0, -93.94949307157529), (0.0, -93.78434144399935), (0.0, -93.65340033554094), (0.0, -93.55898385501735), (0.0, -93.49341045202726), (0.0, -93.45351636979274)]}
============================================================
