Model Ti_Env4B_reg_tmp, Test force-constant-hcp
Test run at 2018-09-10 15:04

model file: ../../../models/Ti/Ti_Env4B_reg_tmp/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/Ti-Env4B-reg-tmp.jld2")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/Ti/force-constant-hcp/test.py
============================================================
import model
import quippy
import numpy as np
from ase.lattice.hexagonal import HexagonalClosedPacked

def force_calculator(calculator):
    lattice_displacements = [[0.001, 0, 0], [-0.001, 0, 0], [0, 0.001, 0], [0, -0.001, 0], [0,0,0.001], [0,0,-0.001]]
    data = []
    
    a0 = 2.95
    c_over_a = 1.588
    
    num_atoms = len(HexagonalClosedPacked(symbol='Ti', latticeconstant=(a0,a0*c_over_a)))
    
    for i in xrange(0,num_atoms):
        forces = []
        for disp in lattice_displacements:
            bulk = HexagonalClosedPacked(symbol='Ti', latticeconstant=(a0,a0*c_over_a))
            big_bulk = bulk * (2,2,2)
            big_bulk[i].position = big_bulk[i].position + disp
            big_bulk.set_calculator(calculator)
            force = big_bulk.get_forces()
            forces.append(force.tolist())
        data.append(forces)
    
    return data[0], data[1]


(config1, config2) = force_calculator(model.calculator)

properties = {"config1":config1, "config2":config2}
============================================================
Traceback (most recent call last):
  File "run-model-test-cas.py", line 88, in <module>
    import model # import and run the current model
  File "../../../models/Ti/Ti_Env4B_reg_tmp/model.py", line 6, in <module>
    IP = juliaimport.import_IP(model_dir + "/Ti-Env4B-reg-tmp.jld2")
  File "../../../models/Ti/Ti_Env4B_reg_tmp/juliaimport.py", line 25, in import_IP
    julia.eval("IPf = fast(IP)")
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 458, in eval
    ans = self._call(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 412, in _call
    self.check_exception(src)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/julia-0.1.5-py2.7.egg/julia/core.py", line 441, in check_exception
    .format(exception, src))
julia.core.JuliaError: Exception 'MethodError: no method matching fast(::Void)
Closest candidates are:
  fast(!Matched::NBodyIPs.NBodyIP) at /Users/Cas/.julia/v0.6/NBodyIPs/src/common.jl:113
  fast(!Matched::NBodyIPs.OneBody) at /Users/Cas/.julia/v0.6/NBodyIPs/src/onebody.jl:22
  fast(!Matched::NBodyIPs.Polys.StNBPoly) at /Users/Cas/.julia/v0.6/NBodyIPs/src/polys.jl:243
  ...' occurred while calling julia code:
IPf = fast(IP)
