Model NRLTB, Test burgers_path
Test run at 2018-10-22 13:42

model file: ../../../models/Ti/NRLTB/model.py
============================================================
from quippy import Potential
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
filename = os.path.join(model_dir, '4x4x4k_mesh_param_file_tightbind.parms.NRL_TB.Ti_spline_old.xml')

calculator = Potential('TB NRL-TB', param_filename = filename)#, Fermi_T = 0.001)

no_checkpoint = True
name = 'DFTB'============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -6.012152989370766), (0.0, -6.011225593734919), (0.0, -6.010052002232146), (0.0, -6.009348289597778), (0.0, -6.009687891564473), (0.0, -6.009819462405053), (0.0, -6.009770827353089), (0.0, -6.0095413480148085), (0.0, -6.00910278163568), (0.0, -6.008412996874277), (0.0, -6.007432548456393), (0.0, -6.0061350144526), (0.0, -6.004487137983074), (0.0, -6.003442193932447), (0.0, -6.002345531418751), (0.0, -6.001379616899878), (0.0, -6.002704846616202), (0.0, -6.003543737136432), (0.0, -6.003906458281585), (0.0, -6.003773100493882), (0.0, -6.0030944612249275), (0.0, -6.00463115701483), (0.0, -6.005855060201761), (0.0, -6.006590834785747), (0.0, -6.006817700918491), (0.0, -6.0065231343433645), (0.0, -6.005701884123328), (0.0, -6.004355639121623), (0.0, -6.002492984805605), (0.0, -6.000126440228155), (0.0, -6.000126440228155), (0.0, -6.002051415245503), (0.0, -6.004176870854205), (0.0, -6.00636488097866), (0.0, -6.008511411801845), (0.0, -6.01050171682911), (0.0, -6.013426562241344), (0.0, -6.01653042928831), (0.0, -6.019387252369519), (0.0, -6.021905736454283), (0.0, -6.024648577740583), (0.0, -6.028011429674315), (0.0, -6.030929511955367), (0.0, -6.033368865181248), (0.0, -6.035302199500079), (0.0, -6.036685053660411), (0.0, -6.040497780856292), (0.0, -6.044051556344887), (0.0, -6.04721169536622), (0.0, -6.04993683831501), (0.0, -6.0521959945911865), (0.0, -6.0539701745900105), (0.0, -6.055226733712429), (0.0, -6.0572727999688585), (0.0, -6.058880809744467), (0.0, -6.059839387885758), (0.0, -6.060151436531204), (0.0, -6.062124117160184), (0.0, -6.063346488403527), (0.0, -6.063659140237282)]}
============================================================
