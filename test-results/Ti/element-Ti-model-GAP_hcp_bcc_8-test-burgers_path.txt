Model GAP_hcp_bcc_8, Test burgers_path
Test run at 2018-10-16 21:07

model file: ../../../models/Ti/GAP_hcp_bcc_8/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_16_60_20_44_49_671"', param_filename='gp_soap_hcp_bcc_24_8.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -6.025434962235735), (0.0, -6.025675943601787), (0.0, -6.025633828989833), (0.0, -6.025298994665022), (0.0, -6.024685972918187), (0.0, -6.023809978809684), (0.0, -6.022679909106067), (0.0, -6.02131279631845), (0.0, -6.019731071349577), (0.0, -6.017956246816697), (0.0, -6.016006643683717), (0.0, -6.013900230468673), (0.0, -6.011652843350656), (0.0, -6.009277518497385), (0.0, -6.006784110273326), (0.0, -6.004178989364229), (0.0, -6.0014648296363795), (0.0, -5.998640235568004), (0.0, -5.995699683649525), (0.0, -5.9926342421328656), (0.0, -5.989431497921748), (0.0, -5.986075801096465), (0.0, -5.982548678384768), (0.0, -5.978831095507674), (0.0, -5.9749896604554245), (0.0, -5.971070584008082), (0.0, -5.967016164439413), (0.0, -5.962794792411739), (0.0, -5.9584777453584135), (0.0, -5.954121639554003), (0.0, -5.954121639554003), (0.0, -5.954735924886534), (0.0, -5.956151441427689), (0.0, -5.958250183663155), (0.0, -5.960966555267494), (0.0, -5.964223820081552), (0.0, -5.967939336219818), (0.0, -5.972033567805942), (0.0, -5.976435682396643), (0.0, -5.9810899341933315), (0.0, -5.985962223630999), (0.0, -5.991058173352076), (0.0, -5.996383866713938), (0.0, -6.001962243311093), (0.0, -6.007803234199227), (0.0, -6.013878326466623), (0.0, -6.020115574912424), (0.0, -6.026406425747178), (0.0, -6.0326380644269), (0.0, -6.0386498307383905), (0.0, -6.044291184131665), (0.0, -6.049347114294703), (0.0, -6.053591326126994), (0.0, -6.056861349405763), (0.0, -6.059162647312717), (0.0, -6.060969063357892), (0.0, -6.06235375270478), (0.0, -6.063331821521949), (0.0, -6.0639148364652655), (0.0, -6.064108920003582)]}
============================================================
