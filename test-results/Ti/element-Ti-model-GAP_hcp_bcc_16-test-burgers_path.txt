Model GAP_hcp_bcc_16, Test burgers_path
Test run at 2018-10-16 14:56

model file: ../../../models/Ti/GAP_hcp_bcc_16/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_10_16_60_14_35_7_995"', param_filename='gp_soap_hcp_bcc_sel_16.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/burgers_path/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"burgers_path.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -12.069278255090975), (0.0, -12.070449243465681), (0.0, -12.070459816155447), (0.0, -12.069174749108525), (0.0, -12.066553584628764), (0.0, -12.06292215824481), (0.0, -12.0587257081104), (0.0, -12.054114905655647), (0.0, -12.049102805154643), (0.0, -12.043713097199255), (0.0, -12.03800425039088), (0.0, -12.031992085387792), (0.0, -12.025685652788034), (0.0, -12.01909217408254), (0.0, -12.01221691122862), (0.0, -12.005063058521817), (0.0, -11.997631663842657), (0.0, -11.989926984866113), (0.0, -11.981955969166716), (0.0, -11.97371467448877), (0.0, -11.965195361647716), (0.0, -11.956388066388635), (0.0, -11.947280674576017), (0.0, -11.937846383406063), (0.0, -11.927811790948034), (0.0, -11.917053158588427), (0.0, -11.905700149215347), (0.0, -11.893936861863821), (0.0, -11.881763299253489), (0.0, -11.86916338650171), (0.0, -11.86916338650171), (0.0, -11.870737601899126), (0.0, -11.873103807133502), (0.0, -11.876460321611528), (0.0, -11.880980720860821), (0.0, -11.886947849634947), (0.0, -11.894500491186957), (0.0, -11.903664446162589), (0.0, -11.914408707665576), (0.0, -11.92664386559042), (0.0, -11.940217476834256), (0.0, -11.954888691543774), (0.0, -11.970399406521254), (0.0, -11.98643548619825), (0.0, -12.002674280876345), (0.0, -12.018805117259372), (0.0, -12.034526132714749), (0.0, -12.049532067520495), (0.0, -12.063426322210084), (0.0, -12.075819838090494), (0.0, -12.08652942331912), (0.0, -12.095570245500673), (0.0, -12.103025455921998), (0.0, -12.108943088713929), (0.0, -12.113486253142792), (0.0, -12.117122526326558), (0.0, -12.119921602158271), (0.0, -12.12190266362441), (0.0, -12.123082264967202), (0.0, -12.123473308914562)]}
============================================================
