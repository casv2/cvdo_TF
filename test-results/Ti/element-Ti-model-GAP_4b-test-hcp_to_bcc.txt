Model GAP_4b, Test hcp_to_bcc
Test run at 2018-10-02 15:39

model file: ../../../models/Ti/GAP_4b/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2018_6_26_60_20_15_36_820"',
                                               param_filename='gp_4b_no_wire_surface.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/Ti/hcp_to_bcc/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"hcp_to_bcc_traj.xyz"),":")
Es = []
for at in ats:
    # e0 = at.get_potential_energy()
    e0 = 0.0
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()
    Es.append((e0, e))
properties = {'E_orig_E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E_orig_E': [(0.0, -97.19555380540152), (0.0, -97.2211385045919), (0.0, -97.24009946110749), (0.0, -97.25222451759832), (0.0, -97.25694085170883), (0.0, -97.25564573532101), (0.0, -97.24939375981512), (0.0, -97.23879957231924), (0.0, -97.22305970317046), (0.0, -97.20107962895678), (0.0, -97.17168557177789), (0.0, -97.13394686156346), (0.0, -97.08741024935631), (0.0, -97.03318051348306), (0.0, -96.97246082833732), (0.0, -96.90421673666911), (0.0, -96.82806827152605), (0.0, -96.74570355134573), (0.0, -96.65901959829935), (0.0, -96.5689725759055), (0.0, -96.47692621300291), (0.0, -96.38473293277815), (0.0, -96.29058757200528), (0.0, -96.19348193924851), (0.0, -96.09736287175015), (0.0, -96.00541324254253), (0.0, -95.91982398402948), (0.0, -95.84165121474568), (0.0, -95.77290263977993), (0.0, -95.71535865760414), (0.0, -95.6672565799805), (0.0, -95.62591382307642), (0.0, -95.58858741559683), (0.0, -95.55146611549627), (0.0, -95.51217328148596), (0.0, -95.4707734997482), (0.0, -95.43186608830378), (0.0, -95.39865329743667), (0.0, -95.3723697499786), (0.0, -95.3534442746309), (0.0, -95.34291344386315), (0.0, -95.34183351417555), (0.0, -95.34992546170972), (0.0, -95.36421869802098), (0.0, -95.38399042545821), (0.0, -95.40831854282212), (0.0, -95.43578356022999), (0.0, -95.46447671620653), (0.0, -95.48782703162574), (0.0, -95.5002910740698), (0.0, -95.49910838642779), (0.0, -95.48493681913652), (0.0, -95.46091580516764), (0.0, -95.42705488698402), (0.0, -95.38367255495673), (0.0, -95.3314258954696), (0.0, -95.2713131137439), (0.0, -95.20466223507101), (0.0, -95.13310737259918), (0.0, -95.05855350146767), (0.0, -94.98313181530335), (0.0, -94.90914749625561), (0.0, -94.83902175088973), (0.0, -94.77523090803452), (0.0, -94.72024357589892), (0.0, -94.67645899721775), (0.0, -94.64614679696692), (0.0, -94.63139065357988), (0.0, -94.63403604997781), (0.0, -94.65564276493856), (0.0, -94.69744306967078), (0.0, -94.75975020639655), (0.0, -94.84052658890883), (0.0, -94.94091428352021), (0.0, -95.06237739412718), (0.0, -95.2049950978943), (0.0, -95.3680176001855), (0.0, -95.54693769969141), (0.0, -95.74120085772927), (0.0, -95.95014589902446), (0.0, -96.17121933050058), (0.0, -96.40025816751955), (0.0, -96.63699438273903), (0.0, -96.88184417145898), (0.0, -97.13222684192566), (0.0, -97.38773207941529), (0.0, -97.64789563460691), (0.0, -97.91122897288629), (0.0, -98.1750826596607), (0.0, -98.43566680980138), (0.0, -98.68805352057998), (0.0, -98.92646006331407), (0.0, -99.14400450494597), (0.0, -99.33323498627877), (0.0, -99.4910768346662), (0.0, -99.61974336427834), (0.0, -99.71755889137027), (0.0, -99.78276315653196), (0.0, -99.81241834386195), (0.0, -99.80437779175726)]}
============================================================
