Model DFTB, Test bulk_omega
Test run at 2018-09-10 14:34

model file: ../../../models/Ti/DFTB/model.py
============================================================
from quippy import Potential
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
filename = os.path.join(model_dir, '4x4x4k_mesh_param_file_tightbind.parms.NRL_TB.Ti_spline_old.xml')

calculator = Potential('TB NRL-TB', param_filename = filename, Fermi_T = 0.001)

#no_checkpoint = True
#name = 'DFTB'============================================================
test file: ../../../tests/Ti/bulk_omega/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.hexagonal import HexagonalClosedPacked
from math import sqrt

import numpy as np
import lattice_tetragonal

# the current model
import model 

#c_over_a = 1.8
#a0 = (16.0*2*2/sqrt(3.0)/c_over_a)**(1.0/3.0)# initial guess at lattice constant, cell will be relaxed below

#c_over_a = 1.588
#a0 = 2.95

def create_omega_custom(c_vs_a, a, z):
   import quippy

   #a = (2 * V / (3.0**(0.5) * c_vs_a))**(1.0/3.0)
   c = c_vs_a * a

   lattice = []
   lattice.append([3.0**(0.5) /2.0 * a,-a/2.0,0])
   lattice.append([3.0**(0.5) /2.0 * a, a/2.0,0])
   lattice.append([0,0,c])
   lattice = np.transpose(lattice)
   unitcell = quippy.Atoms(n=0, lattice=lattice)

   pos = []
   pos.append([3.0**(0.5) /6.0 * a,0,0.0])
   pos.append([3.0**(0.5) /2.0 * a,0,c/2.0])
   pos.append([3.0**(0.5) * 5.0/6.0 * a,0,c/2.0])

   for i in range(0,len(pos)):
      unitcell.add_atoms(pos[i],z)

   return unitcell

# set up the a
#bulk = HexagonalClosedPacked(symbol='Ti', latticeconstant=(a0,a0*c_over_a))

c_vs_a = 0.610
a = 4.630

bulk = create_omega_custom(c_vs_a, a, 22)

(c11, c33, c12, c13, c44, c66, E_vs_V) = lattice_tetragonal.do_lattice(bulk, elastic=True)#, tol=1.0e-2)

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
#properties = {'hcp_E_vs_V': E_vs_V }

properties = {'omega_c11': c11, 'omega_c33': c33, 'omega_c12': c12, 'omega_c13': c13, 'omega_c44': c44, 'omega_c66': c66, 'omega_E_vs_V': E_vs_V }
============================================================
unrelaxed bulk
3
Lattice="4.00969761952195 -2.315 0.0 4.00969761952195 2.315 0.0 0.0 0.0 2.8243" Properties=species:S:1:pos:R:3:Z:I:1 pbc="T T T"
Ti       1.33656587       0.00000000       0.00000000       22 
Ti       4.00969762       0.00000000       1.41215000       22 
Ti       6.68282937       0.00000000       1.41215000       22 
relax_atoms_cell using method cg_n
symmetry.prep: symmetry group number 191 , international (Hermann-Mauguin) P6/mmm , Hall -P 6 2
[[-2.10015382e-15  2.75825033e-16 -2.38850044e-15]
 [-2.51663992e-02 -1.02593852e-05  1.44404505e-05]
 [ 2.51663992e-02  1.02593852e-05 -1.44404505e-05]]
[[-2.10015382e-15  2.75825033e-16 -2.38850044e-15]
 [-2.51663992e-02 -1.02593852e-05  1.44404505e-05]
 [ 2.51663992e-02  1.02593852e-05 -1.44404505e-05]]
(3, 3)
Traceback (most recent call last):
  File "run-model-test-cas.py", line 99, in <module>
    import test  # import and run the current test
  File "../../../tests/Ti/bulk_omega/test.py", line 59, in <module>
    (c11, c33, c12, c13, c44, c66, E_vs_V) = lattice_tetragonal.do_lattice(bulk, elastic=True)#, tol=1.0e-2)
  File "../../../share/lattice_tetragonal.py", line 44, in do_lattice
    bulk = relax_atoms_cell(bulk, tol=tol, traj_file="bulk.relax.extxyz", symmetrize=True)
  File "../../../share/utilities.py", line 178, in relax_atoms_cell
    opt.run(tol, max_steps)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 677, in run
    use_precond=self.use_precond)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 856, in <lambda>
    wrapmethod = lambda name: lambda self, *args, **kwargs: self._runroutine(name, *args, **kwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/oo_fortran.py", line 574, in _runroutine
    res = fobj(*newargs, **newkwargs)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 285, in callback
    Potential.callback_map[at.params['label']](at)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/quippy/potential.py", line 55, in callback
    at.force[:] = at.get_forces().T
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py", line 734, in get_forces
    forces = self._calc.get_forces(self)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 453, in get_forces
    return self.get_property('forces', atoms)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/calculators/calculator.py", line 486, in get_property
    self.calculate(atoms, [name], system_changes)
  File "../../../share/utilities.py", line 358, in calculate
    self.rotations, self.translations, self.symm_map)
  File "../../../share/symmetrize.py", line 80, in forces
    forces = np.reshape(forces, (2,3))
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/numpy/core/fromnumeric.py", line 257, in reshape
    return _wrapfunc(a, 'reshape', newshape, order=order)
  File "/Users/Cas/anaconda2/lib/python2.7/site-packages/numpy/core/fromnumeric.py", line 52, in _wrapfunc
    return getattr(obj, method)(*args, **kwds)
ValueError: cannot reshape array of size 9 into shape (2,3)
