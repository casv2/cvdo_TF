Model PIP_4BBLenv_p, Test layer_test
Test run at 2018-11-13 10:39

model file: ../../../models/W/PIP_4BBLenv_p/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.190826526617442, -11.192937066011522, -11.177064671556733, -11.146715530425812, -11.104122093100477, -11.049801328568247, -10.986225333596195, -10.914959379159784, -10.836107849052421, -10.757406246191188, -10.653219523063584, -10.564552411882065, -10.478278087046945, -10.396528407922254, -10.321737045660155, -10.24881875235232, -10.174721504312345, -10.09901958912252, -10.021398988915026, -9.9418722294154, -9.860808954511718, -9.779148389083048, -9.698231553002541, -9.619536070867586, -9.543651047698507, -9.47170244500262, -9.403891811512644, -9.338505798394511, -9.276993176023321, -9.231049767309209, -9.173638201095047, -9.1145806429825, -9.05565587508901, -8.995872049117807, -8.941251555827389, -8.896276209022593, -8.863229116257783, -8.844316549289477, -8.841565424739342, -8.856729250808824, -8.89056839218241, -8.943222465420138, -9.014915857151864, -9.105488473210702, -9.214537883864663, -9.34167146326572, -9.485102072692971, -9.635145727418028, -9.784118675359736, -9.920965661484514, -10.033455022234167, -10.108710221371778, -10.133199421340919, -10.095091465462621, -9.987221962397749, -9.809375264806183, -9.57030150635621, -9.287871889139028, -8.986439326616367, -8.690253181208226, -8.398916635238622, -8.109543972671545, -7.8224335835312075, -7.537441429298626, -7.254396283240561, -6.973275542141412, -6.694393359760689, -6.418532440051196, -6.147033786235659, -5.8819013852384305, -5.625795341317517, -5.381000457755771, -5.14390549480207, -4.913522517649029, -4.689582485540137, -4.4718223411528655, -4.259991931812298, -4.053893367663644, -3.8533631429782957, -3.656783132483053, -3.4599616788881735, -3.2637945568883895, -3.069452623708597, -2.8780237539204214, -2.6905588707716888, -2.5080926460388815, -2.331669139820397, -2.1623700285909964, -2.001327888038673, -1.8497282139612117, -1.71055758897519, -1.587122408898117, -1.4398677926540648, -1.3111462531163023, -1.2022592020879896, -1.1086819867387385, -1.0316357290131475, -0.9722859619195394, -0.9316479588787984, -0.9105338275538736]}
============================================================
