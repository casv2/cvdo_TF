Model PIP_4BBLenv, Test surface-decohesion-110-unrelaxed
Test run at 2018-11-10 19:44

model file: ../../../models/W/PIP_4BBLenv/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/surface-decohesion-110-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic
import numpy as np

import ase.io, sys

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model

a0 = 3.16 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = BodyCenteredCubic(symbol='W', latticeconstant=a0, directions=[[1,-1,0],[0,0,1],[-1,-1,0]])

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)
# flip coord system for ASE (precon minim?)
c = bulk.get_cell()
t_v = c[0,:].copy()
c[0,:] = c[1,:]
c[1,:] = t_v
bulk.set_cell(c)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (1, 1, 5)

#ase.io.write(sys.stdout, bulk, format='extxyz')

def surface_energy(bulk, z_offset, opening):
    Nat = bulk.get_number_of_atoms()

    # shift so cut is through shuffle plane
    bulk.positions[:,2] += z_offset
    bulk.wrap()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[2,2] *= (np.abs(bulk.cell[2,2])+opening)/np.abs(bulk.cell[2,2])
    eexp  = bulk.get_potential_energy()

    #ase.io.write(sys.stdout, bulk, format='extxyz')

    print 'expanded cell energy', eexp
    e_form = 0.5*(eexp - ebulk) / np.linalg.norm(np.cross(bulk.cell[0,:],bulk.cell[1,:]))
    print 'unrelaxed 110 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
n_steps = 35
max_opening = 5

openings = []
es = []
for i in range(n_steps + 1):
    opening = float(i)/float(n_steps)*max_opening
    openings.append(opening)
    bulk_copy = bulk.copy()
    bulk_copy.set_calculator(model.calculator)
    es.append(surface_energy(bulk_copy, 2.0, opening))

print "openings ", openings
print "es ", es
from scipy import interpolate
spline = interpolate.splrep(openings, es, s=0)
stresses = [x for x in interpolate.splev(openings, spline, der=1)]

print "stresses ", stresses
properties = {'surface_decohesion_unrelaxed_opening': openings, 'surface_decohesion_unrelaxed_energy' : es, 'surface_decohesion_unrelaxed_stress' : stresses}

============================================================
relax_atoms_cell using method lbfgs
/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py:763: UserWarning: Converting 3x3 stress tensor from JulipCalculator calculator to the required Voigt form.
  'calculator to the required Voigt form.')
PreconLBFGS:   0  19:45:21      -44.767028       0.0000       0.0374
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.227, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.054, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.012, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.003, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = True
PreconLBFGS:   1  19:45:22      -44.767044       0.0001       0.0374
INFO:ase.utils.linesearcharmijo:a1 = 0.003, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = True
PreconLBFGS:   2  19:45:23      -44.767166       0.0001       0.0374
INFO:ase.utils.linesearcharmijo:a1 = 0.010, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.002, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
WARNING:ase.optimize.precon:Armijo linesearch failed, resetting Hessian and trying again
PreconLBFGS:   3  19:45:24      -44.767166       0.0001       0.0374
INFO:ase.utils.linesearcharmijo:a1 = 0.016, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.002, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
ERROR:ase.optimize.precon:Armijo linesearch failed after reset of Hessian, aborting
Traceback (most recent call last):
  File "run-model-test-cas.py", line 102, in <module>
    import test  # import and run the current test
  File "../../../tests/W/surface-decohesion-110-unrelaxed/test.py", line 41, in <module>
    bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)
  File "../../../share/utilities.py", line 176, in relax_atoms_cell
    opt.run(tol, max_steps, smax=stol)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 353, in run
    return Optimizer.run(self, fmax, steps)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/optimize.py", line 179, in run
    self.step(f)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 235, in step
    self.line_search(r, g, e, previously_reset_hessian)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 321, in line_search
    rotation_factors=self.rotation_factors)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/utils/linesearcharmijo.py", line 305, in run
    raise RuntimeError('a1 too small, giving up')
RuntimeError: a1 too small, giving up
