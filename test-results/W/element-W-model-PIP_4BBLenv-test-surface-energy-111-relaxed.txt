Model PIP_4BBLenv, Test surface-energy-111-relaxed
Test run at 2018-11-10 19:07

model file: ../../../models/W/PIP_4BBLenv/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/surface-energy-111-relaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic
import numpy as np

import ase.io, sys

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model

a0 = 3.16 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

if not hasattr(model, 'bulk_reference'):
    # set up the a
    bulk = BodyCenteredCubic(symbol='W', latticeconstant=a0)

    # specify that we will use model.calculator to compute forces, energies and stresses
    bulk.set_calculator(model.calculator)

    # use one of the routines from utilities module to relax the initial
    # unit cell and atomic positions
    bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)
else:
    bulk = model.bulk_reference.copy()
    bulk.set_calculator(model.calculator)

a0 = bulk.cell[0,0] # get lattice constant from relaxed bulk
print "got a0 ", a0
bulk = BodyCenteredCubic(symbol="W", latticeconstant=a0, directions=[[1,-1,0],[1,0,-1],[1,1,1]])
bulk.set_calculator(model.calculator)

# set up supercell
bulk *= (1, 1, 10)


def surface_energy(bulk, z_offset):
    Nat = bulk.get_number_of_atoms()

    # shift so cut is through shuffle plane
    bulk.positions[:,2] += z_offset
    bulk.wrap()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[2,:] += [0.0,0.0,10.0]

    np.random.seed(75)

    bulk.positions += (np.random.rand((Nat*3))*0.1).reshape([Nat,3])
    bulk = relax_atoms(bulk, tol=fmax, traj_file="model-"+model.name+"-surface-energy-111-relaxed.opt.xyz")

    eexp  = bulk.get_potential_energy()

    ase.io.write(sys.stdout, bulk, format='extxyz')

    print 'expanded cell energy', eexp
    e_form = 0.5*(eexp - ebulk) / np.linalg.norm(np.cross(bulk.cell[0,:],bulk.cell[1,:]))
    print 'relaxed 111 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_111_relaxed':
                surface_energy(bulk, 2.0) }
============================================================
relax_atoms_cell using method lbfgs
/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py:763: UserWarning: Converting 3x3 stress tensor from JulipCalculator calculator to the required Voigt form.
  'calculator to the required Voigt form.')
PreconLBFGS:   0  19:08:40      -22.383284       0.0000       0.0373
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  19:08:40      -22.393066       0.0001       0.0110
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   2  19:08:40      -22.393932       0.0001       0.0002
got a0  3.178934975991263
bulk cell energy -335.908564665
PreconLBFGS:   0  19:08:43     -326.252965       2.3789
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  19:08:46     -326.829429       2.1719
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   2  19:08:48     -327.606318       0.9601
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   3  19:08:50     -327.649990       0.8012
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   4  19:08:52     -327.724111       0.2721
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   5  19:08:54     -327.728362       0.1432
INFO:ase.utils.linesearcharmijo:a1 = 1.556, suff_dec = True
PreconLBFGS:   6  19:08:56     -327.733541       0.1409
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   7  19:08:57     -327.736598       0.0847
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   8  19:08:59     -327.738095       0.0849
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   9  19:09:00     -327.739175       0.0763
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:  10  19:09:01     -327.739887       0.0431
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:  11  19:09:02     -327.740836       0.0311
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.277, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.029, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.003, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = True
PreconLBFGS:  12  19:09:06     -327.740836       0.0311
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
WARNING:ase.optimize.precon:Armijo linesearch failed, resetting Hessian and trying again
PreconLBFGS:  13  19:09:09     -327.740836       0.0312
INFO:ase.utils.linesearcharmijo:a1 = 0.002, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
INFO:ase.utils.linesearcharmijo:a1 = 0.000, suff_dec = False
ERROR:ase.optimize.precon:Armijo linesearch failed after reset of Hessian, aborting
Traceback (most recent call last):
  File "run-model-test-cas.py", line 102, in <module>
    import test  # import and run the current test
  File "../../../tests/W/surface-energy-111-relaxed/test.py", line 83, in <module>
    surface_energy(bulk, 2.0) }
  File "../../../tests/W/surface-energy-111-relaxed/test.py", line 69, in surface_energy
    bulk = relax_atoms(bulk, tol=fmax, traj_file="model-"+model.name+"-surface-energy-111-relaxed.opt.xyz")
  File "../../../share/utilities.py", line 72, in relax_atoms
    opt.run(tol, max_steps)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 353, in run
    return Optimizer.run(self, fmax, steps)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/optimize.py", line 179, in run
    self.step(f)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 235, in step
    self.line_search(r, g, e, previously_reset_hessian)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/optimize/precon/lbfgs.py", line 321, in line_search
    rotation_factors=self.rotation_factors)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/utils/linesearcharmijo.py", line 305, in run
    raise RuntimeError('a1 too small, giving up')
RuntimeError: a1 too small, giving up
