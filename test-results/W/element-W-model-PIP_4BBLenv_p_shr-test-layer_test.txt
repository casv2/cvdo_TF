Model PIP_4BBLenv_p_shr, Test layer_test
Test run at 2018-11-13 11:03

model file: ../../../models/W/PIP_4BBLenv_p_shr/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p_shreg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.195939937342438, -11.197791089554492, -11.183224829767074, -11.153561216492248, -11.111402547398452, -11.059754847947232, -11.001229812887559, -10.938088276662544, -10.872537633461542, -10.805988005426597, -10.738619500148719, -10.671488276217998, -10.610205154236894, -10.560822375482054, -10.524465322734379, -10.49075054380835, -10.450269978255607, -10.400493398946537, -10.340059251702808, -10.268284674827118, -10.185204055132507, -10.091523033093766, -9.98848725924423, -9.877436770145854, -9.759220711864158, -9.635229914737891, -9.5061247273633, -9.370539107346353, -9.229191335155718, -9.083396714533471, -8.934968295659175, -8.785574511981405, -8.63711699567369, -8.49169450928426, -8.35146169414948, -8.218891513454006, -8.096732256620532, -7.9879400731231485, -7.895669028017433, -7.823250257859268, -7.774237369224887, -7.752616167547943, -7.762511329283984, -7.807923794565676, -7.892456745736344, -8.018948571818296, -8.189564255979722, -8.40752828600085, -8.673232260904143, -8.98425542414832, -9.334743528822969, -9.714782780532587, -10.110347373719692, -10.503671860744364, -10.874752355724883, -11.20438130768538, -11.478062542032045, -11.689794826793662, -11.843622585910028, -11.95092286213651, -12.027336404892706, -12.080844677053332, -12.114099365271775, -12.129126587339996, -12.12795892568109, -12.112562316740958, -12.084754901781983, -12.046136141674737, -11.998029152033569, -11.941437434322397, -11.877017235341373, -11.805323857195367, -11.728164647449145, -11.646547216189878, -11.561201241595128, -11.472763835429646, -11.381780697405901, -11.288708746014159, -11.193920543420814, -11.097711071071979, -11.000305403614384, -10.901861294454093, -10.802480252442598, -10.702216672412385, -10.60108654393124, -10.499077049629731, -10.396155011635114, -10.29227587096605, -10.187391833395784, -10.08145962711928, -9.974506040393466, -9.867239706809297, -9.758709235196278, -9.648636711881712, -9.53750986478016, -9.42550850683431, -9.312773254886462, -9.199482032222086, -9.08585070654029, -8.972132768484114]}
============================================================
