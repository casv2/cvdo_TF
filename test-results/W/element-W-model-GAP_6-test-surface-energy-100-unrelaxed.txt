Model GAP_6, Test surface-energy-100-unrelaxed
Test run at 2018-09-01 12:36

model file: ../../../models/W/GAP_6/model.py
============================================================
import os

from quippy import Potential
import __builtin__

orig_dir = os.getcwd()
model_dir = os.path.dirname(__file__)
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    if hasattr(__builtin__, 'mpi_glob'):
        calculator = Potential(init_args='Potential xml_label="GAP_2013_6_24_60_12_58_8_327"',
                                               param_filename='gp.xml', mpi_obj=mpi_glob)
    else:
        calculator = Potential(init_args='Potential xml_label="GAP_2013_6_24_60_12_58_8_327"',
                                               param_filename='gp.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)

no_checkpoint = True

name = 'GAP'
============================================================
test file: ../../../tests/W/surface-energy-100-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import Diamond

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model 

a0 = 3.16 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = Diamond(symbol='W', latticeconstant=a0)

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (10, 1, 1)

def surface_energy(bulk):
    Nat = bulk.get_number_of_atoms()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[0,:] += [10.0,0.0,0.0]
    eexp  = bulk.get_potential_energy()
    
    print 'expanded cell energy', eexp
    e_form = (eexp - ebulk) / (bulk.cell[1,1]*bulk.cell[2,2])
    print 'unrelaxed 100 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_100_unrelaxed':
                surface_energy(bulk) }
============================================================
relax_atoms_cell using method lbfgs_precon
WARNING:ase.optimize.precon:use_pyamg=True but PyAMG cannot be imported! falling back on direct inversion of preconditioner, may be slow for large systems
PreconLBFGS:   0  12:37:30      -18.985828       0.0000       0.1705
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.00 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): got r_NN=1.368 in 0.0131931304932 s
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=True, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.0100719928741 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000218868255615 s ---
INFO:ase.optimize.precon:--- remove zeros in 8.58306884766e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.00115489959717 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.001296043396 s ---
INFO:ase.optimize.precon:estimate_mu(): mu=1.7942961584650803, mu_c=3.2439724653792634
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=False, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.00167417526245 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000229835510254 s ---
INFO:ase.optimize.precon:--- applied fixed_atoms in 0.000102996826172 s ---
INFO:ase.optimize.precon:--- remove zeros in 8.39233398438e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.000741958618164 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00107097625732 s ---
INFO:ase.optimize.precon:--- Precon created in 0.00497794151306 seconds ---
INFO:ase.optimize.precon:--- Precon applied in 0.000459909439087 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  12:37:40      -19.122383       0.0000       0.0019
bulk cell energy -191.223830925
expanded cell energy -179.985823966
unrelaxed 100 surface formation energy 1.06928474466052
============================================================
Property calculation output:


Summary of computed properties:
{'surface_energy_100_unrelaxed': '1.06928474466052'}
============================================================
