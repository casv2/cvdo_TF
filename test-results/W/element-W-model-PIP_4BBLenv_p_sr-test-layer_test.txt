Model PIP_4BBLenv_p_sr, Test layer_test
Test run at 2018-11-13 10:38

model file: ../../../models/W/PIP_4BBLenv_p_sr/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p_sreg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.188558092177935, -11.190746360255462, -11.175925255998333, -11.145266241852736, -11.10173995483514, -11.049080312929492, -10.989902971873855, -10.92625732963352, -10.859662432567463, -10.782131516774532, -10.701212243498688, -10.632344359997182, -10.567572847827037, -10.511954178761371, -10.468399820722022, -10.429675135899002, -10.387415214621706, -10.33954605312418, -10.285060374053483, -10.223340068140399, -10.154195924024265, -10.07783881671878, -9.994783751482437, -9.905604494966083, -9.810582804243364, -9.709929184099035, -9.603346868109378, -9.490510939551157, -9.372685612819756, -9.253909130576046, -9.127731579719594, -8.999482988349284, -8.871829976223996, -8.7468382103194, -8.62401463095377, -8.504274028081372, -8.38994349623336, -8.28375874870908, -8.188854688523811, -8.108724562562152, -8.0470066626116, -8.007663923579141, -7.994951470124988, -8.01297283994988, -8.065316100525171, -8.15457144228738, -8.284063113451202, -8.46499999594713, -8.70076325420294, -8.989061246387308, -9.324109535935113, -9.695181404898463, -10.086485279199417, -10.476624638460747, -10.83949723290208, -11.148283856608394, -11.380144402357178, -11.520909683278568, -11.567379600044832, -11.527267723886812, -11.437085572715485, -11.309773974914735, -11.147608387024249, -10.952552760581355, -10.726682216747903, -10.472179350866877, -10.191319695669288, -9.886456780189132, -9.56000691626978, -9.214433803050323, -8.852233315122602, -8.4775683034413, -8.102410499051716, -7.731173443390796, -7.366643286453946, -7.011368825248235, -6.667652613237992, -6.337545490433877, -6.0228442365874795, -5.7250829095714435, -5.445506440174886, -5.185114717988563, -4.944660646986097, -4.724658104123152, -4.525393125114949, -4.346936802665267, -4.189159286154608, -4.051744935967716, -3.9342082522059094, -3.835910200922684, -3.7567109449618785, -3.7035305244216397, -3.6649904489434437, -3.6367613237282277, -3.622102352367674, -3.620586647632252, -3.6309626149388774, -3.6519459741241613, -3.6822370621422627, -3.720532205394131]}
============================================================
