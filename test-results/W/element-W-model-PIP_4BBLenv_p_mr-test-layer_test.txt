Model PIP_4BBLenv_p_mr, Test layer_test
Test run at 2018-11-13 10:49

model file: ../../../models/W/PIP_4BBLenv_p_mr/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p_mreg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.189678729438247, -11.19184513337233, -11.177016359260227, -11.146040289676677, -11.101632612121254, -11.047205992168086, -10.985516526495264, -10.91924810661265, -10.850657954076867, -10.775599909622475, -10.70109779016406, -10.631792826007873, -10.56626941508979, -10.510537049933292, -10.466934532182924, -10.4273862902052, -10.383656320933245, -10.333816850780659, -10.277016335024232, -10.212907738890532, -10.141639787624078, -10.063742259275896, -9.979915764159484, -9.890594013613986, -9.79534861607028, -9.693313274721277, -9.582815786056017, -9.465123785249101, -9.341483932733743, -9.210905557531046, -9.079133156156576, -8.946646545593149, -8.814840337315596, -8.685730151401758, -8.560548035772362, -8.441341309440665, -8.330827529403212, -8.231974341721235, -8.14795451689602, -8.082076370213525, -8.037693665367556, -8.0184121790017, -8.027866082824355, -8.069360887489484, -8.145561809570504, -8.25809817481437, -8.409393187608648, -8.609492978387054, -8.860392429428057, -9.159905106557408, -9.501726465051462, -9.874536513656164, -10.262438831854244, -10.644755719214523, -10.997229575715483, -11.295864744392443, -11.521268523565455, -11.66275245317468, -11.720021719194294, -11.702278569795446, -11.641285593624959, -11.54889904350971, -11.427273329825544, -11.278223400481883, -11.103702452132458, -10.905774169895032, -10.686573879028877, -10.448270634958687, -10.193031585039094, -9.92298985870698, -9.640216321866218, -9.3480145486514, -9.055829235810576, -8.767018300715709, -8.483629178778124, -8.207511797386807, -7.940312670059725, -7.683472140560017, -7.4382240734059835, -7.205582991196676, -6.986322726516878, -6.781058808664206, -6.59022388291028, -6.414074181180832, -6.252700568775791, -6.10604056678973, -5.973890936704881, -5.855920975085381, -5.751685821953777, -5.66064008941086, -5.582470872678643, -5.520447474612412, -5.468659163292969, -5.4242904228918984, -5.38885485012007, -5.361953619093624, -5.342692717552209, -5.330168141770731, -5.323477312523581, -5.321726759821064]}
============================================================
