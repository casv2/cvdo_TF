Model PIP_4BBLenv_sr, Test layer_test
Test run at 2018-11-10 20:51

model file: ../../../models/W/PIP_4BBLenv_sr/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_sreg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.191675357105975, -11.191710024192725, -11.175710677454047, -11.145215478840528, -11.102734270033977, -11.051968501412663, -10.995331535692053, -10.934061108405274, -10.867814236494262, -10.790665970019823, -10.703814437066901, -10.627360070319444, -10.555006103034483, -10.49295441754925, -10.443967313943459, -10.399143189579087, -10.349611003216179, -10.293142036065634, -10.228626712644987, -10.155503051878808, -10.073759801197474, -9.983840105076805, -9.886459469847496, -9.782206162769139, -9.67110374780076, -9.553032000109152, -9.427277685897584, -9.293423103013087, -9.152661910974405, -9.010174090744256, -8.856125071339369, -8.69616045216385, -8.532504589906761, -8.366262162371402, -8.19569699728158, -8.02034264346545, -7.841078610337754, -7.659135910784518, -7.476145818495015, -7.294181367342201, -7.11558962291917, -6.943356440884659, -6.781413753179001, -6.634479980743964, -6.508142318444169, -6.408931976015355, -6.34486420952196, -6.325860454641526, -6.358768937805278, -6.446842990571718, -6.591111608294003, -6.788776678607896, -7.032131058483514, -7.307986308082092, -7.598205382831602, -7.881960534234316, -8.139006981276918, -8.353440804194067, -8.516609233993556, -8.62846330867415, -8.699305458274537, -8.729274091818276, -8.716084460495038, -8.658065702900053, -8.554347864760432, -8.404986998733177, -8.2110606124573, -7.974728595698035, -7.699258572820526, -7.389013074150569, -7.049400096475868, -6.687226242087896, -6.3107698273966335, -5.924548315279864, -5.5325892879424625, -5.138890805461527, -4.747375853044919, -4.361852009154814, -3.9859714143598546, -3.6231055392115494, -3.276202083878985, -2.94821992848904, -2.641866275359575, -2.3595557375485154, -2.103393925684447, -1.8751649843743075, -1.6763236609100716, -1.5079901461472853, -1.3709492984218739, -1.2656533940084522, -1.191674161693613, -1.1412116359857434, -1.1224963065030393, -1.139608878002796, -1.1870310346361848, -1.262438035484594, -1.3642627695246339, -1.4907284436039954, -1.6398643949746452, -1.8095298305408698]}
============================================================
