Model W-4B+Env+Reg, Test surface-energy-100-unrelaxed
Test run at 2018-09-01 13:53

model file: ../../../models/W/W-4B+Env+Reg/model.py
============================================================
import juliaimport
import julip
import os

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W-PIP-B4+Env+Reg.jld2")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/surface-energy-100-unrelaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS: 
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model 

a0 = 3.16 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = BodyCenteredCubic(symbol='W', latticeconstant=a0)

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)

# set up supercell
bulk *= (10, 1, 1)

def surface_energy(bulk):
    Nat = bulk.get_number_of_atoms()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[0,:] += [10.0,0.0,0.0]
    eexp  = bulk.get_potential_energy()
    
    print 'expanded cell energy', eexp
    e_form = (eexp - ebulk) / (bulk.cell[1,1]*bulk.cell[2,2])
    print 'unrelaxed 100 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_100_unrelaxed':
                surface_energy(bulk) }
============================================================
relax_atoms_cell using method lbfgs_precon
WARNING:ase.optimize.precon:use_pyamg=True but PyAMG cannot be imported! falling back on direct inversion of preconditioner, may be slow for large systems
/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py:763: UserWarning: Converting 3x3 stress tensor from JulipCalculator calculator to the required Voigt form.
  'calculator to the required Voigt form.')
PreconLBFGS:   0  13:55:40      -22.380837       0.0000       0.0385
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.00 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=1.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=2.62 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): calling neighbour_list with r_cut=4.24 A
INFO:ase.optimize.precon:estimate_nearest_neighbour_distance(): got r_NN=2.737 in 0.00165390968323 s
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=True, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.000217914581299 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000196933746338 s ---
INFO:ase.optimize.precon:--- remove zeros in 7.20024108887e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.00121879577637 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.00115895271301 s ---
INFO:ase.optimize.precon:estimate_mu(): mu=1.1338948366365749, mu_c=46.75447454769309
INFO:ase.optimize.precon:creating sparse precon: initial_assembly=False, force_stab=False, apply_positions=True, apply_cell=True
INFO:ase.optimize.precon:--- neighbour list created in 0.000181198120117 s ---
INFO:ase.optimize.precon:adding stabilisation to preconditioner
INFO:ase.optimize.precon:--- computed triplet format in 0.000169992446899 s ---
INFO:ase.optimize.precon:--- applied fixed_atoms in 6.60419464111e-05 s ---
INFO:ase.optimize.precon:--- remove zeros in 5.79357147217e-05 s ---
INFO:ase.optimize.precon:--- created CSC matrix in 0.000630140304565 s ---
INFO:ase.optimize.precon:--- N-dim precon created in 0.000977993011475 s ---
INFO:ase.optimize.precon:--- Precon created in 0.0029079914093 seconds ---
INFO:ase.optimize.precon:--- Precon applied in 0.00037693977356 seconds ---
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  13:56:05      -22.392396       0.0000       0.0002
bulk cell energy -223.923958195
expanded cell energy -218.523345651
unrelaxed 100 surface formation energy 0.5338781864427394
============================================================
Property calculation output:


Summary of computed properties:
{'surface_energy_100_unrelaxed': '0.5338781864427394'}
============================================================
