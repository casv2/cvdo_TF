Model PIP_4BBLenv_p_r, Test layer_test
Test run at 2018-11-13 10:50

model file: ../../../models/W/PIP_4BBLenv_p_r/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p_reg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.190880332471176, -11.193152246032454, -11.17849290892224, -11.147643995682547, -11.103295502529031, -11.048642777325226, -10.986289613404937, -10.918822262355578, -10.848654926719773, -10.775182796694345, -10.701842153925382, -10.63063709569168, -10.563767365974954, -10.507749866123872, -10.464846910008921, -10.426401045971605, -10.383816845719982, -10.334955370036203, -10.278703193656515, -10.21443091994687, -10.142025990507399, -10.061835556583354, -9.974516612046553, -9.880628926006747, -9.780007675289713, -9.672532175129938, -9.557451665167005, -9.43528205221165, -9.307128867172304, -9.172343359872707, -9.036933559824533, -8.901452500584703, -8.767577930295149, -8.637636048034722, -8.513553817560727, -8.39790976900596, -8.29380413560059, -8.204569814651071, -8.133724826317833, -8.084903523671423, -8.06183238440499, -8.068524893130451, -8.108966665923898, -8.186784789975516, -8.304912250654493, -8.465157419687186, -8.669335817580224, -8.924129328270963, -9.229740704299488, -9.582374649778677, -9.973991787159717, -10.391592804150141, -10.817643896531559, -11.23032985336741, -11.605203746710707, -11.91912972788326, -12.154820823814038, -12.304968146319645, -12.373614513141948, -12.373817117167834, -12.333802906151828, -12.264987870276583, -12.170029761511893, -12.051071860185672, -11.910359227082983, -11.750187639129967, -11.572841102262823, -11.380533625145805, -11.175357957995494, -10.95924253760071, -10.733917377178551, -10.501826834507295, -10.26972647141623, -10.040117987701061, -9.81454136063398, -9.594358210891345, -9.380749680108478, -9.174717218148286, -8.977085737980596, -8.788501580542329, -8.60942619947779, -8.440180355868131, -8.280940510148739, -8.131748721160514, -7.992524806706855, -7.863079258764658, -7.743126032998223, -7.632295994979739, -7.530149784254303, -7.436190779167227, -7.350230821062028, -7.275993710955987, -7.2070892678995735, -7.1410835263711805, -7.079875561298199, -7.023316481352743, -6.970816975850344, -6.921805320740333, -6.875735446939851, -6.832091997114699]}
============================================================
