Model PIP_W_4BBL_r, Test surface-energy-110-relaxed
Test run at 2018-11-05 17:45

model file: ../../../models/W/PIP_W_4BBL_r/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBL_2s_med_reg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/surface-energy-110-relaxed/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines
from ase.lattice.cubic import BodyCenteredCubic
import numpy as np

import ase.io, sys

# set of utility routines specific this this model/testing framework
from utilities import relax_atoms, relax_atoms_cell

# the current model
import model

a0 = 3.16 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

if not hasattr(model, 'bulk_reference'):
    # set up the a
    bulk = BodyCenteredCubic(symbol='W', latticeconstant=a0)

    # specify that we will use model.calculator to compute forces, energies and stresses
    bulk.set_calculator(model.calculator)

    # use one of the routines from utilities module to relax the initial
    # unit cell and atomic positions
    bulk = relax_atoms_cell(bulk, tol=fmax, traj_file=None)
else:
    bulk = model.bulk_reference.copy()
    bulk.set_calculator(model.calculator)

a0 = bulk.cell[0,0] # get lattice constant from relaxed bulk
bulk = BodyCenteredCubic(symbol="W", latticeconstant=a0, directions=[[1,-1,0],[0,0,1],[1,1,0]])
bulk.set_calculator(model.calculator)

# set up supercell
bulk *= (1, 1, 10)
# flip coord system for ASE (precon minim?)
c = bulk.get_cell()
t_v = c[0,:].copy()
c[0,:] = c[1,:]
c[1,:] = t_v
bulk.set_cell(c)

ase.io.write(sys.stdout, bulk, format='extxyz')

def surface_energy(bulk, z_offset):
    Nat = bulk.get_number_of_atoms()

    # shift so cut is through shuffle plane
    bulk.positions[:,2] += z_offset
    bulk.wrap()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print 'bulk cell energy', ebulk

    bulk.cell[2,2] *= (np.abs(bulk.cell[2,2])+10.0)/np.abs(bulk.cell[2,2])

    np.random.seed(75)

    bulk.positions += (np.random.rand((Nat*3))*0.1).reshape([Nat,3])
    bulk = relax_atoms(bulk, tol=fmax, traj_file="model-"+model.name+"-surface-energy-110-relaxed.opt.xyz")

    eexp  = bulk.get_potential_energy()

    ase.io.write(sys.stdout, bulk, format='extxyz')

    print 'expanded cell energy', eexp
    e_form = 0.5*(eexp - ebulk) / np.linalg.norm(np.cross(bulk.cell[0,:],bulk.cell[1,:]))
    print 'relaxed 110 surface formation energy', e_form
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
properties = {'surface_energy_110_relaxed':
                surface_energy(bulk, 1.0) }
============================================================
relax_atoms_cell using method lbfgs
/Users/Cas/.local/lib/python2.7/site-packages/ase/atoms.py:763: UserWarning: Converting 3x3 stress tensor from JulipCalculator calculator to the required Voigt form.
  'calculator to the required Voigt form.')
PreconLBFGS:   0  17:47:16      -22.383657       0.0000       0.0377
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   1  17:47:16      -22.394033       0.0000       0.0139
INFO:ase.utils.linesearcharmijo:a1 = 1.000, suff_dec = True
PreconLBFGS:   2  17:47:16      -22.395659       0.0000       0.0005
WARNING: Creating a left-handed coordinate system!
Traceback (most recent call last):
  File "run-model-test-cas.py", line 102, in <module>
    import test  # import and run the current test
  File "../../../tests/W/surface-energy-110-relaxed/test.py", line 54, in <module>
    ase.io.write(sys.stdout, bulk, format='extxyz')
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/io/formats.py", line 352, in write
    _write(filename, fd, format, io, images, parallel=parallel, **kwargs)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/io/formats.py", line 381, in _write
    io.write(fd, images, **kwargs)
  File "/Users/Cas/.local/lib/python2.7/site-packages/ase/io/extxyz.py", line 578, in write_xyz
    xx, yy, zz, yz, xz, xy = value
ValueError: need more than 3 values to unpack
