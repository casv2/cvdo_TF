Model PIP_4BBLenv_p_sshr, Test layer_test
Test run at 2018-11-13 11:16

model file: ../../../models/W/PIP_4BBLenv_p_sshr/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_p_sshreg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.198264117118477, -11.199040065014744, -11.183517866162648, -11.153276095528696, -11.110479930707648, -11.057451812505642, -10.996650241999488, -10.930380393233952, -10.86107633684455, -10.789734422102281, -10.716871583933662, -10.645081895472078, -10.57992155173529, -10.527874013536985, -10.489955348978196, -10.455031492773252, -10.413448071956893, -10.362853059316134, -10.302064041489679, -10.230545830799606, -10.148430841642273, -10.056458573599528, -9.955837039067733, -9.84782804790753, -9.733251396695035, -9.613319136507195, -9.488440743566533, -9.356902749797587, -9.21896420791001, -9.075487793375853, -8.927431209930328, -8.77583422858454, -8.621830940243614, -8.466649767909196, -8.311611776689801, -8.15814351443589, -8.007775880472122, -7.862138658719809, -7.722951484810279, -7.5920038614701655, -7.471226037195529, -7.362805508506897, -7.2688834062884835, -7.19137247763408, -7.131737730044905, -7.090721207987487, -7.069395584967394, -7.073974193255791, -7.107200301174684, -7.170294931128195, -7.262975039611363, -7.382959114238359, -7.526113841638382, -7.68589263917743, -7.853226893088614, -8.017734232118476, -8.169070650103798, -8.298412406415073, -8.399425758470334, -8.469351831527076, -8.521951666524295, -8.562811045167972, -8.592963628226736, -8.61332963423505, -8.624729946729426, -8.627834178365294, -8.623116515926206, -8.61082210731685, -8.59094580257226, -8.563223268227906, -8.52713472245328, -8.482805368818841, -8.434842477997721, -8.384510104379716, -8.332313828715275, -8.278704924934637, -8.224080877675929, -8.168786934692424, -8.113118393776372, -8.057324373955852, -8.001611762423375, -7.946149205805109, -7.891072419103191, -7.836489102783664, -7.782484261349665, -7.729125340759354, -7.676467114290027, -7.624556489029379, -7.573436857998895, -7.5231520869265704, -7.4737539630102034, -7.425347369120719, -7.377931154395845, -7.331556264051353, -7.286340141723293, -7.242389493133391, -7.199818620329404, -7.158754587352846, -7.119336418303664, -7.081713559329783]}
============================================================
