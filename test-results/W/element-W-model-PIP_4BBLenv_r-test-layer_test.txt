Model PIP_4BBLenv_r, Test layer_test
Test run at 2018-11-10 20:51

model file: ../../../models/W/PIP_4BBLenv_r/model.py
============================================================
import juliaimport
import julip
import os
import glob

"""
pwd = os.getcwd()


os.chdir(model_dir)

json_file = glob.glob("*.json")[0]

os.chdir(pwd)
"""

#IP = juliaimport.import_IP(model_dir + "/{0}".format(json_file))

model_dir = os.path.dirname(os.path.realpath(__file__))
IP = juliaimport.import_IP(model_dir + "/W_4BBLenv_med_reg.json")

#IP = juliaimport.import_IP(os.path.realpath(__file__)[0:-8] + "Ti_4B_med.json")
ASE_IP = julip.JulipCalculator("IP")

calculator = ASE_IP

no_checkpoint = True

name = 'PIP'
============================================================
test file: ../../../tests/W/layer_test/test.py
============================================================
# This script defines a test case which computes one or more physical
# properties with a given model
#
# INPUTS:
#   model.calculator -- an ase.calculator.Calculator instance
#     this script can assume the calculator is checkpointed.
#
# OUTPUTS:
#   properties -- dictionary of key/value pairs corresponding
#     to physical quantities computed by this test

# standard ASE structure generation routines

import ase.io, os

# set of utility routines specific this this model/testing framework

# the current model
import model

ats = ase.io.read(os.path.join(os.path.dirname(__file__),"bcc_layers.xyz"),":")
Es = []

for at in ats:
    at.set_calculator(model.calculator)
    e = at.get_potential_energy()/len(at)
    Es.append(e)

properties = {'E' : Es}
============================================================
============================================================
Property calculation output:


Summary of computed properties:
{'E': [-11.195779913374219, -11.195015926206821, -11.178833576246621, -11.14850353631745, -11.106773052478365, -11.057974588832376, -11.004536952816691, -10.947586446098779, -10.88621334987103, -10.81624747184801, -10.74318018905059, -10.66983450568404, -10.596026592930965, -10.52961227485433, -10.474898836126298, -10.424363076645522, -10.37003155379249, -10.310684751917767, -10.24615138068317, -10.176573739286022, -10.102276047365168, -10.023550578146967, -9.940410540277488, -9.852147910328757, -9.756719557338224, -9.65188955317865, -9.535340395275673, -9.408639003292722, -9.272292853684375, -9.124092787212032, -8.969839232548049, -8.808490176078562, -8.640380090199104, -8.466614715995629, -8.287837211351725, -8.105521752991057, -7.9219688975752485, -7.740076868146499, -7.563415857549117, -7.39630191707375, -7.243494078607421, -7.11080931168697, -7.005695545001304, -6.9370031442071385, -6.915181841609353, -6.95247208980836, -7.061645651114726, -7.248449369596464, -7.516608694703657, -7.865284927216845, -8.287235746594574, -8.767643512057301, -9.283292175927158, -9.804190415633649, -10.297351597073035, -10.731760001034361, -11.084917822968999, -11.348753381488832, -11.532101168084822, -11.65573904268638, -11.72140377617004, -11.726836960819307, -11.670753029949656, -11.552376429399615, -11.372287831605542, -11.13258622800214, -10.83698424041612, -10.49084995941038, -10.10119037576809, -9.676577349647319, -9.227018223426924, -8.7626536907779, -8.286570044510142, -7.803123325505908, -7.317285803244625, -6.8339018947148436, -6.35763779859998, -5.892934913496927, -5.443968011389737, -5.01457812225008, -4.608193248059201, -4.227944127074841, -3.8765795901196674, -3.556443279694093, -3.26946143726548, -3.017136078642211, -2.8005419653962296, -2.6203296267707943, -2.476731126602348, -2.3695714625871203, -2.2984412200958664, -2.2643316160734006, -2.2634019538119277, -2.2929840672299404, -2.352371392897623, -2.4396223309612313, -2.552288732871079, -2.6877070028658987, -2.843034123271607, -3.015279789895591]}
============================================================
